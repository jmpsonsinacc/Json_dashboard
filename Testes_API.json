{
  "stats": {
    "build": 282,
    "URL": "https://jenkins-master-gsp.mgt.naturacloud.com/view/Automa%C3%A7%C3%A3o/job/Testes-Automatizados/job/Testes-API/job/gsp-api-test-daily/282/",
    "suites": 25,
    "tests": 180,
    "passes": 178,
    "pending": 0,
    "failures": 2,
    "start": "2024-06-21T19:02:41.620Z",
    "end": "2024-06-21T19:25:48.804Z",
    "duration": 1387184,
    "testsRegistered": 180,
    "passPercent": 98.9,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "f449ec9f-ac96-4ad0-a0cf-7544f2128b4e",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "277b9b74-348a-46d5-9290-227ed1669246",
        "title": "Realizar captação de produto regular",
        "fullFile": "/home/jenkins/workspace/Testes-Automatizados/Testes-API/gsp-api-test-daily/test/automacaoapi/captacaopedido.js",
        "file": "/test/automacaoapi/captacaopedido.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Criando um novo carrinho - Cart-Mine",
            "fullTitle": "Realizar captação de produto regular Criando um novo carrinho - Cart-Mine",
            "timedOut": false,
            "duration": 5354,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await cartSevice.cartInfo();\nJoi.assert(response.body, schema_cart().cart_sucess);\nexpect(response.status).to.eql(200);\ncart_uid = response.body.summary.cartUid;\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "18381865-157f-41c8-8c2b-591291de46d6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Deletando produto do carrinho",
            "fullTitle": "Realizar captação de produto regular Deletando produto do carrinho",
            "timedOut": false,
            "duration": 5674,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .delete(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "97bf9ec3-f1d4-4f53-a335-f8316fe65ebc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Criando um novo carrinho - Cart-Mine",
            "fullTitle": "Realizar captação de produto regular Criando um novo carrinho - Cart-Mine",
            "timedOut": false,
            "duration": 5388,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await cartSevice.cartInfo();\nJoi.assert(response.body, schema_cart().cart_sucess);\nexpect(response.status).to.eql(200);\ncart_uid = response.body.summary.cartUid;\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "cdae101c-8117-450b-b910-1803f247bede",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com estoque no carrinho - cartIem ",
            "fullTitle": "Realizar captação de produto regular Adicionando produto com estoque no carrinho - cartIem ",
            "timedOut": false,
            "duration": 10083,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"produto_regular\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCart);\nconsole.log(jsonUpdate);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(response.body);\n\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "1ed8dfb5-54b5-4045-8963-34646a767ef3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Consultando todos os produtos que estão no carrinho - GetCart",
            "fullTitle": "Realizar captação de produto regular Consultando todos os produtos que estão no carrinho - GetCart",
            "timedOut": false,
            "duration": 4964,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "a7171e76-7309-494d-b521-e3d66474b24a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Selecionando endereço e fazendo o envio do pedido - Shipping ",
            "fullTitle": "Realizar captação de produto regular Selecionando endereço e fazendo o envio do pedido - Shipping ",
            "timedOut": false,
            "duration": 9491,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst address = await profileService.addressInfo();\nconst updateAdress = address.body;\nconst valor = address.body.addresses[0].deliveryModes[0].deliveryPolicyId;\nconst alteracaoDeli = { deliveryPolicyId: valor };\nconst jsonUpdate = _.merge(\n  {},\n  {},\n  payloadShipping,\n  updateAdress,\n  alteracaoDeli\n);\nconst response = await request(url)\n  .patch(`/v1/cart/${cart_uid}/shipping`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nJoi.assert(response.body, schema_cart().shippingOk);\nexpect(response.status).to.eql(200);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "b61e5d78-78c7-4193-918d-d861d313beee",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Realizando o pagamento do pedido - payment",
            "fullTitle": "Realizar captação de produto regular Realizando o pagamento do pedido - payment",
            "timedOut": false,
            "duration": 5208,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst payment_conditions = token.body.orderProfile.paymentConditions[0];\nconst jsonUpdate = _.merge({}, payment_conditions, paymentCart);;\nconst response = await request(url)\n  .patch(`/v1/cart/${cart_uid}/payment`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nJoi.assert(response.body, schema_cart().payment_sucess);\nexpect(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "6659aa38-86bd-4c4f-8886-3602ba3df537",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Finalizando o pedido e gerando o número do pedido - cartChekcout",
            "fullTitle": "Realizar captação de produto regular Finalizando o pedido e gerando o número do pedido - cartChekcout",
            "timedOut": false,
            "duration": 18906,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst address = await profileService.addressInfo();\nconst orderNumber = await orderService.generate_order_number();\nconst payment = token.body.orderProfile.paymentConditions[0];\nconst payment_update = { paymentConditions: payment };\nconst address_update = address.body;\nconst address_update_new = { addresses: address_update };\nconst orderNumber_update = { orderNumber: orderNumber.body.orderNumber };\nconst jsonupdate = _.merge(\n  {},\n  paymentCartCheckout,\n  payment_update,\n  address_update_new,\n  orderNumber_update\n);\nconst response = await request(url)\n\n  .post(`/v1/cart/${cart_uid}/checkout`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonupdate);\nJoi.assert(response.body, schema_cart().payment_checkout);\nexpect(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "7163382c-86b4-462b-a132-a87150333695",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "18381865-157f-41c8-8c2b-591291de46d6",
          "97bf9ec3-f1d4-4f53-a335-f8316fe65ebc",
          "cdae101c-8117-450b-b910-1803f247bede",
          "1ed8dfb5-54b5-4045-8963-34646a767ef3",
          "a7171e76-7309-494d-b521-e3d66474b24a",
          "b61e5d78-78c7-4193-918d-d861d313beee",
          "6659aa38-86bd-4c4f-8886-3602ba3df537",
          "7163382c-86b4-462b-a132-a87150333695"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 65068,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b50cff6e-3996-4bd4-9316-2657ab5bf9fd",
        "title": "Realizar captação de produto combo",
        "fullFile": "/home/jenkins/workspace/Testes-Automatizados/Testes-API/gsp-api-test-daily/test/automacaoapi/captacaopedido.js",
        "file": "/test/automacaoapi/captacaopedido.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Deletando produto do carrinho",
            "fullTitle": "Realizar captação de produto combo Deletando produto do carrinho",
            "timedOut": false,
            "duration": 4728,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .delete(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "e88d1ced-20be-41e8-9207-cba0d52c1d60",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Criando um novo carrinho - Cart-Mine",
            "fullTitle": "Realizar captação de produto combo Criando um novo carrinho - Cart-Mine",
            "timedOut": false,
            "duration": 4736,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await cartSevice.cartInfo();\nJoi.assert(response.body, schema_cart().cart_sucess);\nexpect(response.status).to.eql(200);\ncart_uid = response.body.summary.cartUid;\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "c5424989-9e85-45a8-bd75-41d234e155f1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com estoque no carrinho - cartIem ",
            "fullTitle": "Realizar captação de produto combo Adicionando produto com estoque no carrinho - cartIem ",
            "timedOut": false,
            "duration": 9424,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"produto_kit\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCart);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(response.body);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "9566dfa3-4cd9-4ffe-90c4-8c9c8d04ddc7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Consultando todos os produtos que estão no carrinho - GetCart",
            "fullTitle": "Realizar captação de produto combo Consultando todos os produtos que estão no carrinho - GetCart",
            "timedOut": false,
            "duration": 4930,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "d61bd48a-cd9e-4d8e-bff8-1941832dfd49",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Selecionando endereço e fazendo o envio do pedido - Shipping ",
            "fullTitle": "Realizar captação de produto combo Selecionando endereço e fazendo o envio do pedido - Shipping ",
            "timedOut": false,
            "duration": 9378,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst address = await profileService.addressInfo();\nconst updateAdress = address.body;\nconst valor = address.body.addresses[0].deliveryModes[0].deliveryPolicyId;\nconst alteracaoDeli = { deliveryPolicyId: valor };\nconst jsonUpdate = _.merge(\n  {},\n  {},\n  payloadShipping,\n  updateAdress,\n  alteracaoDeli\n);\nconst response = await request(url)\n  .patch(`/v1/cart/${cart_uid}/shipping`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nJoi.assert(response.body, schema_cart().shippingOk);\nexpect(response.status).to.eql(200);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "10cf8b04-5d00-41ef-851b-8e523983ed34",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Realizando o pagamento do pedido - payment",
            "fullTitle": "Realizar captação de produto combo Realizando o pagamento do pedido - payment",
            "timedOut": false,
            "duration": 4698,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst payment_conditions = token.body.orderProfile.paymentConditions[0];\nconst jsonUpdate = _.merge({}, payment_conditions, paymentCart);;\nconst response = await request(url)\n  .patch(`/v1/cart/${cart_uid}/payment`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nJoi.assert(response.body, schema_cart().payment_sucess);\nexpect(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "7b97460a-194a-4ef7-9267-8a88bc6baeaf",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Finalizando o pedido e gerando o número do pedido - cartChekcout",
            "fullTitle": "Realizar captação de produto combo Finalizando o pedido e gerando o número do pedido - cartChekcout",
            "timedOut": false,
            "duration": 17926,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst address = await profileService.addressInfo();\nconst orderNumber = await orderService.generate_order_number();\nconst payment = token.body.orderProfile.paymentConditions[0];\nconst payment_update = { paymentConditions: payment };\nconst address_update = address.body;\nconst address_update_new = { addresses: address_update };\nconst orderNumber_update = { orderNumber: orderNumber.body.orderNumber };\nconst jsonupdate = _.merge(\n  {},\n  paymentCartCheckout,\n  payment_update,\n  address_update_new,\n  orderNumber_update\n);\nconst response = await request(url)\n\n  .post(`/v1/cart/${cart_uid}/checkout`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonupdate);\nJoi.assert(response.body, schema_cart().payment_checkout);\nexpect(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "9838349b-b7fd-47d3-9868-3d9ef385e95a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "e88d1ced-20be-41e8-9207-cba0d52c1d60",
          "c5424989-9e85-45a8-bd75-41d234e155f1",
          "9566dfa3-4cd9-4ffe-90c4-8c9c8d04ddc7",
          "d61bd48a-cd9e-4d8e-bff8-1941832dfd49",
          "10cf8b04-5d00-41ef-851b-8e523983ed34",
          "7b97460a-194a-4ef7-9267-8a88bc6baeaf",
          "9838349b-b7fd-47d3-9868-3d9ef385e95a"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 55820,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "79d878eb-ef04-4e52-baf0-9e48fa3d0bec",
        "title": "Realizar captação após alteração de endereço",
        "fullFile": "/home/jenkins/workspace/Testes-Automatizados/Testes-API/gsp-api-test-daily/test/automacaoapi/captacaopedido.js",
        "file": "/test/automacaoapi/captacaopedido.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Deletando produto do carrinho",
            "fullTitle": "Realizar captação após alteração de endereço Deletando produto do carrinho",
            "timedOut": false,
            "duration": 4874,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .delete(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "b37559f3-c150-42dc-a72f-07e3d4af9f45",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Criando um novo carrinho - Cart-Mine",
            "fullTitle": "Realizar captação após alteração de endereço Criando um novo carrinho - Cart-Mine",
            "timedOut": false,
            "duration": 4845,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await cartSevice.cartInfo();\nJoi.assert(response.body, schema_cart().cart_sucess);\nexpect(response.status).to.eql(200);\ncart_uid = response.body.summary.cartUid;\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "a24235c8-d484-43e6-9838-f1f0e8ea3242",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com estoque no carrinho - cartIem ",
            "fullTitle": "Realizar captação após alteração de endereço Adicionando produto com estoque no carrinho - cartIem ",
            "timedOut": false,
            "duration": 9926,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"produto_regular\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCart);\nconsole.log(jsonUpdate);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(response.body);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "92a5be24-bdac-41b9-b9a8-36faa4292c59",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Consultando todos os produtos que estão no carrinho - GetCart",
            "fullTitle": "Realizar captação após alteração de endereço Consultando todos os produtos que estão no carrinho - GetCart",
            "timedOut": false,
            "duration": 5152,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "3d30859f-f970-46b7-8616-51d6056b3cbd",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Selecionando endereço e fazendo o envio do pedido - Shipping ",
            "fullTitle": "Realizar captação após alteração de endereço Selecionando endereço e fazendo o envio do pedido - Shipping ",
            "timedOut": false,
            "duration": 11226,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst address = await profileService.addressInfo();\nconst updateAdress = address.body;\nconst valor = address.body.addresses[0].deliveryModes[0].deliveryPolicyId;\nconst alteracaoDeli = { deliveryPolicyId: valor };\nconst jsonUpdate = _.merge(\n  {},\n  {},\n  payloadShipping,\n  updateAdress,\n  alteracaoDeli\n);\nconst response = await request(url)\n  .patch(`/v1/cart/${cart_uid}/shipping`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nJoi.assert(response.body, schema_cart().shippingOk);\nexpect(response.status).to.eql(200);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "8702585d-f2fa-4fe4-8b06-665f84ce257d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Realizando o pagamento do pedido - payment",
            "fullTitle": "Realizar captação após alteração de endereço Realizando o pagamento do pedido - payment",
            "timedOut": false,
            "duration": 4988,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst payment_conditions = token.body.orderProfile.paymentConditions[0];\nconst jsonUpdate = _.merge({}, payment_conditions, paymentCart);;\nconst response = await request(url)\n  .patch(`/v1/cart/${cart_uid}/payment`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nJoi.assert(response.body, schema_cart().payment_sucess);\nexpect(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "c7ebaee1-59e3-4ff9-8f64-9a665bcb7085",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Finalizando o pedido e gerando o número do pedido - cartChekcout",
            "fullTitle": "Realizar captação após alteração de endereço Finalizando o pedido e gerando o número do pedido - cartChekcout",
            "timedOut": false,
            "duration": 18433,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst address = await profileService.addressInfo();\nconst orderNumber = await orderService.generate_order_number();\nconst payment = token.body.orderProfile.paymentConditions[0];\nconst payment_update = { paymentConditions: payment };\nconst address_update = address.body;\nconst address_update_new = { addresses: address_update };\nconst orderNumber_update = { orderNumber: orderNumber.body.orderNumber };\nconst jsonupdate = _.merge(\n  {},\n  paymentCartCheckout,\n  payment_update,\n  address_update_new,\n  orderNumber_update\n);\nconst response = await request(url)\n\n  .post(`/v1/cart/${cart_uid}/checkout`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonupdate);\nJoi.assert(response.body, schema_cart().payment_checkout);\nexpect(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "a936e200-964a-4f2f-8684-1c41e310c392",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "b37559f3-c150-42dc-a72f-07e3d4af9f45",
          "a24235c8-d484-43e6-9838-f1f0e8ea3242",
          "92a5be24-bdac-41b9-b9a8-36faa4292c59",
          "3d30859f-f970-46b7-8616-51d6056b3cbd",
          "8702585d-f2fa-4fe4-8b06-665f84ce257d",
          "c7ebaee1-59e3-4ff9-8f64-9a665bcb7085",
          "a936e200-964a-4f2f-8684-1c41e310c392"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 59444,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "89640dd6-961c-48d2-a51e-bc4045d5d5e3",
        "title": "Alterar quantidade do item",
        "fullFile": "/home/jenkins/workspace/Testes-Automatizados/Testes-API/gsp-api-test-daily/test/automacaoapi/captacaopedido.js",
        "file": "/test/automacaoapi/captacaopedido.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Deletando produto do carrinho",
            "fullTitle": "Alterar quantidade do item Deletando produto do carrinho",
            "timedOut": false,
            "duration": 5226,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .delete(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "dd277673-a632-4409-964f-5c6b2f53bbbb",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Criando um novo carrinho - Cart-Mine",
            "fullTitle": "Alterar quantidade do item Criando um novo carrinho - Cart-Mine",
            "timedOut": false,
            "duration": 5487,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await cartSevice.cartInfo();\nJoi.assert(response.body, schema_cart().cart_sucess);\nexpect(response.status).to.eql(200);\ncart_uid = response.body.summary.cartUid;\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "a2306a22-4418-4696-b142-2fc20d77cab8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com estoque no carrinho - cartIem ",
            "fullTitle": "Alterar quantidade do item Adicionando produto com estoque no carrinho - cartIem ",
            "timedOut": false,
            "duration": 9533,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"produto_regular\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCart);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "89da3efd-f13a-4e48-a2a5-b9f09c7bd593",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando um novo produto utilizando  - cartItem ",
            "fullTitle": "Alterar quantidade do item Adicionando um novo produto utilizando  - cartItem ",
            "timedOut": false,
            "duration": 10780,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"produto_kit\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCart);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "eb385386-10c9-4b20-9706-9a666919b8cb",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Consultando todos os produtos que estão no carrinho - GetCart",
            "fullTitle": "Alterar quantidade do item Consultando todos os produtos que estão no carrinho - GetCart",
            "timedOut": false,
            "duration": 4798,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nconsole.log(response.body.purchasedItems[0])\ncartItemUid = (response.body.purchasedItems[0].cartItemUid);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "723a5204-929b-4352-9eb8-01cb147c4935",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Deletando produto do carrinho",
            "fullTitle": "Alterar quantidade do item Deletando produto do carrinho",
            "timedOut": false,
            "duration": 4519,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .delete(`/v1/cart/${cart_uid}/item/${cartItemUid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "ec025c43-77f0-41f6-861a-833c9efc67db",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Consultando todos os produtos que estão no carrinho - GetCart",
            "fullTitle": "Alterar quantidade do item Consultando todos os produtos que estão no carrinho - GetCart",
            "timedOut": false,
            "duration": 4688,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nexpect(response.body.purchasedItems[0].productCode).to.not.equal(productType);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "40945fed-c847-4e3b-ae27-1206d0550661",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "dd277673-a632-4409-964f-5c6b2f53bbbb",
          "a2306a22-4418-4696-b142-2fc20d77cab8",
          "89da3efd-f13a-4e48-a2a5-b9f09c7bd593",
          "eb385386-10c9-4b20-9706-9a666919b8cb",
          "723a5204-929b-4352-9eb8-01cb147c4935",
          "ec025c43-77f0-41f6-861a-833c9efc67db",
          "40945fed-c847-4e3b-ae27-1206d0550661"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 45031,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5aea877d-7de4-4b7a-af87-bc73e4c140f3",
        "title": "Captação de produto regular de marcas distintas",
        "fullFile": "/home/jenkins/workspace/Testes-Automatizados/Testes-API/gsp-api-test-daily/test/automacaoapi/captacaopedido.js",
        "file": "/test/automacaoapi/captacaopedido.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Deletando produto do carrinho",
            "fullTitle": "Captação de produto regular de marcas distintas Deletando produto do carrinho",
            "timedOut": false,
            "duration": 5951,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .delete(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "f75377f4-64db-40cc-bd5c-0cf437257e95",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Criando um novo carrinho - Cart-Mine",
            "fullTitle": "Captação de produto regular de marcas distintas Criando um novo carrinho - Cart-Mine",
            "timedOut": false,
            "duration": 5228,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await cartSevice.cartInfo();\nJoi.assert(response.body, schema_cart().cart_sucess);\nexpect(response.status).to.eql(200);\ncart_uid = response.body.summary.cartUid;\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "96ed03fc-7fb8-4a88-83fc-846c0aa316bd",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com estoque no carrinho - cartIem ",
            "fullTitle": "Captação de produto regular de marcas distintas Adicionando produto com estoque no carrinho - cartIem ",
            "timedOut": false,
            "duration": 12763,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"produto_regular_casaestilo\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCart);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(\"response Body\", response.body);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "25d8c52c-65aa-479e-aca2-a59b5259e8b7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com estoque no carrinho - cartIem ",
            "fullTitle": "Captação de produto regular de marcas distintas Adicionando produto com estoque no carrinho - cartIem ",
            "timedOut": false,
            "duration": 15290,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"produto_kit\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCart);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(\"response Body\", response.body);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "53ebe14a-d4b0-41d2-829a-47b6b6b11bec",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com estoque no carrinho - cartIem ",
            "fullTitle": "Captação de produto regular de marcas distintas Adicionando produto com estoque no carrinho - cartIem ",
            "timedOut": false,
            "duration": 18813,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"produto_regular\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCart);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(\"response Body\", response.body);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "d310e7bc-e2ec-4d0d-820b-85440be83a76",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Consultando todos os produtos que estão no carrinho - GetCart",
            "fullTitle": "Captação de produto regular de marcas distintas Consultando todos os produtos que estão no carrinho - GetCart",
            "timedOut": false,
            "duration": 6304,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nconsole.log(response.body.purchasedItems[0])\nconst companyBrandIds = [];\nfor (const item of response.body.purchasedItems) {\n  companyBrandIds.push(item.companyBrandId);\n}\nconsole.log(companyBrandIds)\nexpect(companyBrandIds).to.contains(1, 2, 3);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "b46dcdfe-4f41-4d42-ac9b-1228166dcc28",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Selecionando endereço e fazendo o envio do pedido - Shipping ",
            "fullTitle": "Captação de produto regular de marcas distintas Selecionando endereço e fazendo o envio do pedido - Shipping ",
            "timedOut": false,
            "duration": 14115,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst address = await profileService.addressInfo();\nconst updateAdress = address.body;\nconst valor = address.body.addresses[0].deliveryModes[0].deliveryPolicyId;\nconst alteracaoDeli = { deliveryPolicyId: valor };\nconst jsonUpdate = _.merge(\n  {},\n  {},\n  payloadShipping,\n  updateAdress,\n  alteracaoDeli\n);\nconst response = await request(url)\n  .patch(`/v1/cart/${cart_uid}/shipping`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nJoi.assert(response.body, schema_cart().shippingOk);\nexpect(response.status).to.eql(200);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "44b7d9a8-e410-4dbb-a718-c5d1f3db9e0e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Realizando o pagamento do pedido - payment",
            "fullTitle": "Captação de produto regular de marcas distintas Realizando o pagamento do pedido - payment",
            "timedOut": false,
            "duration": 5772,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst payment_conditions = token.body.orderProfile.paymentConditions[0];\nconst jsonUpdate = _.merge({}, payment_conditions, paymentCart);;\nconst response = await request(url)\n  .patch(`/v1/cart/${cart_uid}/payment`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nJoi.assert(response.body, schema_cart().payment_sucess);\nexpect(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "a26ab8e9-3717-4d59-87ed-6252b42df00b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Finalizando o pedido e gerando o número do pedido - cartChekcout",
            "fullTitle": "Captação de produto regular de marcas distintas Finalizando o pedido e gerando o número do pedido - cartChekcout",
            "timedOut": false,
            "duration": 25599,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst address = await profileService.addressInfo();\nconst orderNumber = await orderService.generate_order_number();\nconst payment = token.body.orderProfile.paymentConditions[0];\nconst payment_update = { paymentConditions: payment };\nconst address_update = address.body;\nconst address_update_new = { addresses: address_update };\nconst orderNumber_update = { orderNumber: orderNumber.body.orderNumber };\nconst jsonupdate = _.merge(\n  {},\n  paymentCartCheckout,\n  payment_update,\n  address_update_new,\n  orderNumber_update\n);\nconst response = await request(url)\n\n  .post(`/v1/cart/${cart_uid}/checkout`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonupdate);\nJoi.assert(response.body, schema_cart().payment_checkout);\nexpect(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "bf0e57dd-d4d9-418f-b08a-d736e848b465",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "f75377f4-64db-40cc-bd5c-0cf437257e95",
          "96ed03fc-7fb8-4a88-83fc-846c0aa316bd",
          "25d8c52c-65aa-479e-aca2-a59b5259e8b7",
          "53ebe14a-d4b0-41d2-829a-47b6b6b11bec",
          "d310e7bc-e2ec-4d0d-820b-85440be83a76",
          "b46dcdfe-4f41-4d42-ac9b-1228166dcc28",
          "44b7d9a8-e410-4dbb-a718-c5d1f3db9e0e",
          "a26ab8e9-3717-4d59-87ed-6252b42df00b",
          "bf0e57dd-d4d9-418f-b08a-d736e848b465"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 109835,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "63fc5501-9e10-4304-865c-6087d68e4179",
        "title": "Captação com produto DE/POR",
        "fullFile": "/home/jenkins/workspace/Testes-Automatizados/Testes-API/gsp-api-test-daily/test/automacaoapi/captacaopedido.js",
        "file": "/test/automacaoapi/captacaopedido.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Deletando produto do carrinho",
            "fullTitle": "Captação com produto DE/POR Deletando produto do carrinho",
            "timedOut": false,
            "duration": 5504,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .delete(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "a5871c30-1b80-4b2b-9dde-57ffc6959fa8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Criando um novo carrinho - Cart-Mine",
            "fullTitle": "Captação com produto DE/POR Criando um novo carrinho - Cart-Mine",
            "timedOut": false,
            "duration": 4798,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await cartSevice.cartInfo();\nJoi.assert(response.body, schema_cart().cart_sucess);\nexpect(response.status).to.eql(200);\ncart_uid = response.body.summary.cartUid;\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "e300d408-f047-4c21-b89a-01b36421a22d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com estoque no carrinho - cartIem ",
            "fullTitle": "Captação com produto DE/POR Adicionando produto com estoque no carrinho - cartIem ",
            "timedOut": false,
            "duration": 10095,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"produto_de_por\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCart);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(\"response Body\", response.body);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "e074951b-d3b5-40eb-a3a6-17ba0bf0e3f6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Consultando todos os produtos que estão no carrinho - GetCart",
            "fullTitle": "Captação com produto DE/POR Consultando todos os produtos que estão no carrinho - GetCart",
            "timedOut": false,
            "duration": 4878,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nconsole.log(response.body.purchasedItems[0]);\nexpect(response.body.purchasedItems[0].unitSellingPrice).to.be.lessThan(response.body.purchasedItems[0].unitPrice);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "ac2309c0-1c18-4fba-83a7-96ccc4f866af",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Selecionando endereço e fazendo o envio do pedido - Shipping ",
            "fullTitle": "Captação com produto DE/POR Selecionando endereço e fazendo o envio do pedido - Shipping ",
            "timedOut": false,
            "duration": 9568,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst address = await profileService.addressInfo();\nconst updateAdress = address.body;\nconst valor = address.body.addresses[0].deliveryModes[0].deliveryPolicyId;\nconst alteracaoDeli = { deliveryPolicyId: valor };\nconst jsonUpdate = _.merge(\n  {},\n  {},\n  payloadShipping,\n  updateAdress,\n  alteracaoDeli\n);\nconst response = await request(url)\n  .patch(`/v1/cart/${cart_uid}/shipping`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nJoi.assert(response.body, schema_cart().shippingOk);\nexpect(response.status).to.eql(200);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "9dce32bc-e5bb-42b0-bcb4-a9c7f1c54903",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Realizando o pagamento do pedido - payment",
            "fullTitle": "Captação com produto DE/POR Realizando o pagamento do pedido - payment",
            "timedOut": false,
            "duration": 4771,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst payment_conditions = token.body.orderProfile.paymentConditions[0];\nconst jsonUpdate = _.merge({}, payment_conditions, paymentCart);;\nconst response = await request(url)\n  .patch(`/v1/cart/${cart_uid}/payment`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nJoi.assert(response.body, schema_cart().payment_sucess);\nexpect(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "aae9c261-e57b-48c1-b7e8-41dbe3ed5ca5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Finalizando o pedido e gerando o número do pedido - cartChekcout",
            "fullTitle": "Captação com produto DE/POR Finalizando o pedido e gerando o número do pedido - cartChekcout",
            "timedOut": false,
            "duration": 18080,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst address = await profileService.addressInfo();\nconst orderNumber = await orderService.generate_order_number();\nconst payment = token.body.orderProfile.paymentConditions[0];\nconst payment_update = { paymentConditions: payment };\nconst address_update = address.body;\nconst address_update_new = { addresses: address_update };\nconst orderNumber_update = { orderNumber: orderNumber.body.orderNumber };\nconst jsonupdate = _.merge(\n  {},\n  paymentCartCheckout,\n  payment_update,\n  address_update_new,\n  orderNumber_update\n);\nconst response = await request(url)\n\n  .post(`/v1/cart/${cart_uid}/checkout`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonupdate);\nJoi.assert(response.body, schema_cart().payment_checkout);\nexpect(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "15b5f691-c8b4-4995-8a91-e1d9a0a70dee",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "a5871c30-1b80-4b2b-9dde-57ffc6959fa8",
          "e300d408-f047-4c21-b89a-01b36421a22d",
          "e074951b-d3b5-40eb-a3a6-17ba0bf0e3f6",
          "ac2309c0-1c18-4fba-83a7-96ccc4f866af",
          "9dce32bc-e5bb-42b0-bcb4-a9c7f1c54903",
          "aae9c261-e57b-48c1-b7e8-41dbe3ed5ca5",
          "15b5f691-c8b4-4995-8a91-e1d9a0a70dee"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 57694,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "fe2ba492-40ef-4acc-b606-f8e302ac4382",
        "title": "Realizar captacao promoção Desconto",
        "fullFile": "/home/jenkins/workspace/Testes-Automatizados/Testes-API/gsp-api-test-daily/test/automacaoapi/captacaopedido.js",
        "file": "/test/automacaoapi/captacaopedido.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Deletando produto do carrinho",
            "fullTitle": "Realizar captacao promoção Desconto Deletando produto do carrinho",
            "timedOut": false,
            "duration": 4995,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .delete(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "ae728bbf-ec97-44d1-82bc-cd7c6ef11b71",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Criando um novo carrinho - Cart-Mine",
            "fullTitle": "Realizar captacao promoção Desconto Criando um novo carrinho - Cart-Mine",
            "timedOut": false,
            "duration": 4568,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await cartSevice.cartInfo();\nJoi.assert(response.body, schema_cart().cart_sucess);\nexpect(response.status).to.eql(200);\ncart_uid = response.body.summary.cartUid;\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "0942fa93-4c68-404f-a1ab-20a8c19d5502",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com estoque no carrinho - cartIem ",
            "fullTitle": "Realizar captacao promoção Desconto Adicionando produto com estoque no carrinho - cartIem ",
            "timedOut": false,
            "duration": 9228,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"produto_desconto\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCart);\nconsole.log(jsonUpdate);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(response.body);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "490ac8d2-56a2-46eb-9b6b-e2a15ecff5c5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Consultando todos os produtos que estão no carrinho - GetCart",
            "fullTitle": "Realizar captacao promoção Desconto Consultando todos os produtos que estão no carrinho - GetCart",
            "timedOut": false,
            "duration": 4628,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "ce5d7cb9-3d9a-4a38-ae4c-9d99da02d469",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Validando promoção de Desconto - GetCart",
            "fullTitle": "Realizar captacao promoção Desconto Validando promoção de Desconto - GetCart",
            "timedOut": false,
            "duration": 4891,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\n\nlet productType = \"produto_desconto\";\nlet promoType = \"promo_desconto_percentual\"\nlet pais = process.env.USER;\nlet productCodeInput = `${massa_produtos[pais][productType]}`;\nlet benefitType = `${massa_promocoes[promoType]}`;\nconsole.log(\"benefitType\", benefitType);\nconsole.log(\"productCode\", productCodeInput);\ngenericMethods.validatePromotionBenefitByProductCode(response, productCodeInput, benefitType)\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "16947719-c92e-4e8d-a1cb-cf68d743ac0a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Selecionando endereço e fazendo o envio do pedido - Shipping ",
            "fullTitle": "Realizar captacao promoção Desconto Selecionando endereço e fazendo o envio do pedido - Shipping ",
            "timedOut": false,
            "duration": 8996,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst address = await profileService.addressInfo();\nconst updateAdress = address.body;\nconst valor = address.body.addresses[0].deliveryModes[0].deliveryPolicyId;\nconst alteracaoDeli = { deliveryPolicyId: valor };\nconst jsonUpdate = _.merge(\n  {},\n  {},\n  payloadShipping,\n  updateAdress,\n  alteracaoDeli\n);\nconst response = await request(url)\n  .patch(`/v1/cart/${cart_uid}/shipping`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nJoi.assert(response.body, schema_cart().shippingOk);\nexpect(response.status).to.eql(200);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "ae573b39-081e-4582-b29c-1da527d5a273",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Realizando o pagamento do pedido - payment",
            "fullTitle": "Realizar captacao promoção Desconto Realizando o pagamento do pedido - payment",
            "timedOut": false,
            "duration": 4887,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst payment_conditions = token.body.orderProfile.paymentConditions[0];\nconst jsonUpdate = _.merge({}, payment_conditions, paymentCart);;\nconst response = await request(url)\n  .patch(`/v1/cart/${cart_uid}/payment`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nJoi.assert(response.body, schema_cart().payment_sucess);\nexpect(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "18592c5d-ac93-47a4-b3d5-4a2c7f13cbec",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Finalizando o pedido e gerando o número do pedido - cartChekcout",
            "fullTitle": "Realizar captacao promoção Desconto Finalizando o pedido e gerando o número do pedido - cartChekcout",
            "timedOut": false,
            "duration": 19603,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst address = await profileService.addressInfo();\nconst orderNumber = await orderService.generate_order_number();\nconst payment = token.body.orderProfile.paymentConditions[0];\nconst payment_update = { paymentConditions: payment };\nconst address_update = address.body;\nconst address_update_new = { addresses: address_update };\nconst orderNumber_update = { orderNumber: orderNumber.body.orderNumber };\nconst jsonupdate = _.merge(\n  {},\n  paymentCartCheckout,\n  payment_update,\n  address_update_new,\n  orderNumber_update\n);\nconst response = await request(url)\n\n  .post(`/v1/cart/${cart_uid}/checkout`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonupdate);\nJoi.assert(response.body, schema_cart().payment_checkout);\nexpect(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "612b28f0-a96d-45d3-944a-3c798a6f5089",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "ae728bbf-ec97-44d1-82bc-cd7c6ef11b71",
          "0942fa93-4c68-404f-a1ab-20a8c19d5502",
          "490ac8d2-56a2-46eb-9b6b-e2a15ecff5c5",
          "ce5d7cb9-3d9a-4a38-ae4c-9d99da02d469",
          "16947719-c92e-4e8d-a1cb-cf68d743ac0a",
          "ae573b39-081e-4582-b29c-1da527d5a273",
          "18592c5d-ac93-47a4-b3d5-4a2c7f13cbec",
          "612b28f0-a96d-45d3-944a-3c798a6f5089"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 61796,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6568bfbb-cf36-4b05-8fa0-bcc0a42c149d",
        "title": "Realizar captação com promoção Frete Grátis",
        "fullFile": "/home/jenkins/workspace/Testes-Automatizados/Testes-API/gsp-api-test-daily/test/automacaoapi/captacaopedido.js",
        "file": "/test/automacaoapi/captacaopedido.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Deletando produto do carrinho",
            "fullTitle": "Realizar captação com promoção Frete Grátis Deletando produto do carrinho",
            "timedOut": false,
            "duration": 4800,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .delete(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "99bb6346-370c-466e-bbb2-c1bd4dcb7b23",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Criando um novo carrinho - Cart-Mine",
            "fullTitle": "Realizar captação com promoção Frete Grátis Criando um novo carrinho - Cart-Mine",
            "timedOut": false,
            "duration": 6404,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await cartSevice.cartInfo();\nJoi.assert(response.body, schema_cart().cart_sucess);\nexpect(response.status).to.eql(200);\ncart_uid = response.body.summary.cartUid;\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "52c50a81-0b46-464d-801a-b9c60810a1f9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com estoque no carrinho - cartIem ",
            "fullTitle": "Realizar captação com promoção Frete Grátis Adicionando produto com estoque no carrinho - cartIem ",
            "timedOut": false,
            "duration": 15237,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"promocao_frete_gratis\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCart);\nconsole.log(jsonUpdate);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(response.body);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "b258d40e-1e4a-483c-9f82-b5a9358ff926",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Consultando todos os produtos que estão no carrinho - GetCart",
            "fullTitle": "Realizar captação com promoção Frete Grátis Consultando todos os produtos que estão no carrinho - GetCart",
            "timedOut": false,
            "duration": 5453,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nconsole.log(response.body)\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "f386861f-6c81-4394-8a7e-601b6c2fc597",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Validando promoção Frete Grátis no carrinho - GetCart",
            "fullTitle": "Realizar captação com promoção Frete Grátis Validando promoção Frete Grátis no carrinho - GetCart",
            "timedOut": false,
            "duration": 4972,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nlet productType = \"promocao_frete_gratis\";\nlet promoType = \"promo_desconto_frete\"\nlet pais = process.env.USER;\nlet productCodeInput = `${massa_produtos[pais][productType]}`;\nlet benefitType = `${massa_promocoes[promoType]}`;\ngenericMethods.validatePromotionBenefitByProductCode(response, productCodeInput, benefitType)\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "7bb64c33-b53d-49e3-be6e-cdf50a437ca2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Selecionando endereço e fazendo o envio do pedido - Shipping ",
            "fullTitle": "Realizar captação com promoção Frete Grátis Selecionando endereço e fazendo o envio do pedido - Shipping ",
            "timedOut": false,
            "duration": 13281,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst address = await profileService.addressInfo();\nconst updateAdress = address.body;\nconst valor = address.body.addresses[0].deliveryModes[0].deliveryPolicyId;\nconst alteracaoDeli = { deliveryPolicyId: valor };\nconst jsonUpdate = _.merge(\n  {},\n  {},\n  payloadShipping,\n  updateAdress,\n  alteracaoDeli\n);\nconst response = await request(url)\n  .patch(`/v1/cart/${cart_uid}/shipping`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nJoi.assert(response.body, schema_cart().shippingOk);\nexpect(response.status).to.eql(200);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "30186237-4e20-4236-9482-4c372978ac43",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Realizando o pagamento do pedido - payment",
            "fullTitle": "Realizar captação com promoção Frete Grátis Realizando o pagamento do pedido - payment",
            "timedOut": false,
            "duration": 5946,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst payment_conditions = token.body.orderProfile.paymentConditions[0];\nconst jsonUpdate = _.merge({}, payment_conditions, paymentCart);;\nconst response = await request(url)\n  .patch(`/v1/cart/${cart_uid}/payment`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nJoi.assert(response.body, schema_cart().payment_sucess);\nexpect(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "7513ee5f-b710-4956-b209-c135c5bb34cc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Finalizando o pedido e gerando o número do pedido - cartChekcout",
            "fullTitle": "Realizar captação com promoção Frete Grátis Finalizando o pedido e gerando o número do pedido - cartChekcout",
            "timedOut": false,
            "duration": 20668,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst address = await profileService.addressInfo();\nconst orderNumber = await orderService.generate_order_number();\nconst payment = token.body.orderProfile.paymentConditions[0];\nconst payment_update = { paymentConditions: payment };\nconst address_update = address.body;\nconst address_update_new = { addresses: address_update };\nconst orderNumber_update = { orderNumber: orderNumber.body.orderNumber };\nconst jsonupdate = _.merge(\n  {},\n  paymentCartCheckout,\n  payment_update,\n  address_update_new,\n  orderNumber_update\n);\nconst response = await request(url)\n\n  .post(`/v1/cart/${cart_uid}/checkout`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonupdate);\nJoi.assert(response.body, schema_cart().payment_checkout);\nexpect(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "71486b44-8375-4b20-a5ad-622585730f38",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "99bb6346-370c-466e-bbb2-c1bd4dcb7b23",
          "52c50a81-0b46-464d-801a-b9c60810a1f9",
          "b258d40e-1e4a-483c-9f82-b5a9358ff926",
          "f386861f-6c81-4394-8a7e-601b6c2fc597",
          "7bb64c33-b53d-49e3-be6e-cdf50a437ca2",
          "30186237-4e20-4236-9482-4c372978ac43",
          "7513ee5f-b710-4956-b209-c135c5bb34cc",
          "71486b44-8375-4b20-a5ad-622585730f38"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 76761,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "82c9adaf-ca9e-4469-b8b2-77c442bcb869",
        "title": "Realizar captação com exceção de lucratividade",
        "fullFile": "/home/jenkins/workspace/Testes-Automatizados/Testes-API/gsp-api-test-daily/test/automacaoapi/captacaopedido.js",
        "file": "/test/automacaoapi/captacaopedido.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Deletando produto do carrinho",
            "fullTitle": "Realizar captação com exceção de lucratividade Deletando produto do carrinho",
            "timedOut": false,
            "duration": 4805,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .delete(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "f31f4861-c81b-4f34-8192-ba49bc38f982",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Criando um novo carrinho - Cart-Mine",
            "fullTitle": "Realizar captação com exceção de lucratividade Criando um novo carrinho - Cart-Mine",
            "timedOut": false,
            "duration": 4674,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await cartSevice.cartInfo();\nJoi.assert(response.body, schema_cart().cart_sucess);\nexpect(response.status).to.eql(200);\ncart_uid = response.body.summary.cartUid;\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "c3754369-ae73-4d69-8c92-04634766fb31",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com estoque no carrinho - cartIem ",
            "fullTitle": "Realizar captação com exceção de lucratividade Adicionando produto com estoque no carrinho - cartIem ",
            "timedOut": false,
            "duration": 10099,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"produto_excecao_lucratividade\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCart);\nconsole.log(jsonUpdate);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(response.body);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "9a2c7079-0e64-4872-bc70-5f5e0e1e11be",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Consultando todos os produtos que estão no carrinho - GetCart",
            "fullTitle": "Realizar captação com exceção de lucratividade Consultando todos os produtos que estão no carrinho - GetCart",
            "timedOut": false,
            "duration": 4705,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "e5890379-4eec-4845-977d-fe6c486afda4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Validando exceção de lucratividade no carrinho - GetCart",
            "fullTitle": "Realizar captação com exceção de lucratividade Validando exceção de lucratividade no carrinho - GetCart",
            "timedOut": false,
            "duration": 5755,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nconst profitabilityException = response.body.purchasedItems[0].profitabilityException\nexpect(profitabilityException).to.not.equal(null);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "73a04d36-ec27-45e0-8fd1-51ee6f9e0513",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Selecionando endereço e fazendo o envio do pedido - Shipping ",
            "fullTitle": "Realizar captação com exceção de lucratividade Selecionando endereço e fazendo o envio do pedido - Shipping ",
            "timedOut": false,
            "duration": 10623,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst address = await profileService.addressInfo();\nconst updateAdress = address.body;\nconst valor = address.body.addresses[0].deliveryModes[0].deliveryPolicyId;\nconst alteracaoDeli = { deliveryPolicyId: valor };\nconst jsonUpdate = _.merge(\n  {},\n  {},\n  payloadShipping,\n  updateAdress,\n  alteracaoDeli\n);\nconst response = await request(url)\n  .patch(`/v1/cart/${cart_uid}/shipping`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nJoi.assert(response.body, schema_cart().shippingOk);\nexpect(response.status).to.eql(200);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "aadc5a91-603d-4d90-b630-ca8f2169a9ef",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Realizando o pagamento do pedido - payment",
            "fullTitle": "Realizar captação com exceção de lucratividade Realizando o pagamento do pedido - payment",
            "timedOut": false,
            "duration": 4771,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst payment_conditions = token.body.orderProfile.paymentConditions[0];\nconst jsonUpdate = _.merge({}, payment_conditions, paymentCart);;\nconst response = await request(url)\n  .patch(`/v1/cart/${cart_uid}/payment`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nJoi.assert(response.body, schema_cart().payment_sucess);\nexpect(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "4739985b-9642-487e-bae7-f599e8184e0a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Finalizando o pedido e gerando o número do pedido - cartChekcout",
            "fullTitle": "Realizar captação com exceção de lucratividade Finalizando o pedido e gerando o número do pedido - cartChekcout",
            "timedOut": false,
            "duration": 19223,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst address = await profileService.addressInfo();\nconst orderNumber = await orderService.generate_order_number();\nconst payment = token.body.orderProfile.paymentConditions[0];\nconst payment_update = { paymentConditions: payment };\nconst address_update = address.body;\nconst address_update_new = { addresses: address_update };\nconst orderNumber_update = { orderNumber: orderNumber.body.orderNumber };\nconst jsonupdate = _.merge(\n  {},\n  paymentCartCheckout,\n  payment_update,\n  address_update_new,\n  orderNumber_update\n);\nconst response = await request(url)\n\n  .post(`/v1/cart/${cart_uid}/checkout`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonupdate);\nJoi.assert(response.body, schema_cart().payment_checkout);\nexpect(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "e7ca1e86-53e9-4eff-a9b1-0cb4d20b815c",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "f31f4861-c81b-4f34-8192-ba49bc38f982",
          "c3754369-ae73-4d69-8c92-04634766fb31",
          "9a2c7079-0e64-4872-bc70-5f5e0e1e11be",
          "e5890379-4eec-4845-977d-fe6c486afda4",
          "73a04d36-ec27-45e0-8fd1-51ee6f9e0513",
          "aadc5a91-603d-4d90-b630-ca8f2169a9ef",
          "4739985b-9642-487e-bae7-f599e8184e0a",
          "e7ca1e86-53e9-4eff-a9b1-0cb4d20b815c"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 64655,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b4b7d404-120c-4912-a882-8147e70b74bb",
        "title": "Realizar captação com promoção Lucratividade",
        "fullFile": "/home/jenkins/workspace/Testes-Automatizados/Testes-API/gsp-api-test-daily/test/automacaoapi/captacaopedido.js",
        "file": "/test/automacaoapi/captacaopedido.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Deletando produto do carrinho",
            "fullTitle": "Realizar captação com promoção Lucratividade Deletando produto do carrinho",
            "timedOut": false,
            "duration": 4657,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .delete(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "fa07eb06-bdf3-4fa5-a906-d2cc1642c923",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Criando um novo carrinho - Cart-Mine",
            "fullTitle": "Realizar captação com promoção Lucratividade Criando um novo carrinho - Cart-Mine",
            "timedOut": false,
            "duration": 4443,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await cartSevice.cartInfo();\nJoi.assert(response.body, schema_cart().cart_sucess);\nexpect(response.status).to.eql(200);\ncart_uid = response.body.summary.cartUid;\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "da1ad8aa-366c-413f-a655-ea41468bf3ff",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com estoque no carrinho - cartIem ",
            "fullTitle": "Realizar captação com promoção Lucratividade Adicionando produto com estoque no carrinho - cartIem ",
            "timedOut": false,
            "duration": 9147,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"promocao_lucratividade\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCart);\nconsole.log(jsonUpdate);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(response.body);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "1e8b7af3-1527-4e99-98d1-55ccc933b78e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Consultando todos os produtos que estão no carrinho - GetCart",
            "fullTitle": "Realizar captação com promoção Lucratividade Consultando todos os produtos que estão no carrinho - GetCart",
            "timedOut": false,
            "duration": 4526,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "aae18a55-44e3-4aba-90c4-ff177eca5ad6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Validando promoção Lucratividade no carrinho - GetCart",
            "fullTitle": "Realizar captação com promoção Lucratividade Validando promoção Lucratividade no carrinho - GetCart",
            "timedOut": false,
            "duration": 4595,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nlet productType = \"promocao_lucratividade\";\nlet promoType = \"promo_lucratividade\"\nlet pais = process.env.USER;\nlet productCodeInput = `${massa_produtos[pais][productType]}`;\nlet benefitType = `${massa_promocoes[promoType]}`;\nconsole.log(response.body.purchasedItems[0])\ngenericMethods.validatePromotionBenefitByProductCode(response, productCodeInput, benefitType)\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "30a4bd37-d842-417d-9e57-3df7afc4e808",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Selecionando endereço e fazendo o envio do pedido - Shipping ",
            "fullTitle": "Realizar captação com promoção Lucratividade Selecionando endereço e fazendo o envio do pedido - Shipping ",
            "timedOut": false,
            "duration": 9160,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst address = await profileService.addressInfo();\nconst updateAdress = address.body;\nconst valor = address.body.addresses[0].deliveryModes[0].deliveryPolicyId;\nconst alteracaoDeli = { deliveryPolicyId: valor };\nconst jsonUpdate = _.merge(\n  {},\n  {},\n  payloadShipping,\n  updateAdress,\n  alteracaoDeli\n);\nconst response = await request(url)\n  .patch(`/v1/cart/${cart_uid}/shipping`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nJoi.assert(response.body, schema_cart().shippingOk);\nexpect(response.status).to.eql(200);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "6edddab5-d635-44de-ba4b-acfed9893a59",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Realizando o pagamento do pedido - payment",
            "fullTitle": "Realizar captação com promoção Lucratividade Realizando o pagamento do pedido - payment",
            "timedOut": false,
            "duration": 4714,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst payment_conditions = token.body.orderProfile.paymentConditions[0];\nconst jsonUpdate = _.merge({}, payment_conditions, paymentCart);;\nconst response = await request(url)\n  .patch(`/v1/cart/${cart_uid}/payment`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nJoi.assert(response.body, schema_cart().payment_sucess);\nexpect(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "c2473e95-9f9b-4f4a-bc08-ac913f84e0f2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Finalizando o pedido e gerando o número do pedido - cartChekcout",
            "fullTitle": "Realizar captação com promoção Lucratividade Finalizando o pedido e gerando o número do pedido - cartChekcout",
            "timedOut": false,
            "duration": 17896,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst address = await profileService.addressInfo();\nconst orderNumber = await orderService.generate_order_number();\nconst payment = token.body.orderProfile.paymentConditions[0];\nconst payment_update = { paymentConditions: payment };\nconst address_update = address.body;\nconst address_update_new = { addresses: address_update };\nconst orderNumber_update = { orderNumber: orderNumber.body.orderNumber };\nconst jsonupdate = _.merge(\n  {},\n  paymentCartCheckout,\n  payment_update,\n  address_update_new,\n  orderNumber_update\n);\nconst response = await request(url)\n\n  .post(`/v1/cart/${cart_uid}/checkout`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonupdate);\nJoi.assert(response.body, schema_cart().payment_checkout);\nexpect(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "67ccda91-00ea-47a3-8e47-5dbec89bd273",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "fa07eb06-bdf3-4fa5-a906-d2cc1642c923",
          "da1ad8aa-366c-413f-a655-ea41468bf3ff",
          "1e8b7af3-1527-4e99-98d1-55ccc933b78e",
          "aae18a55-44e3-4aba-90c4-ff177eca5ad6",
          "30a4bd37-d842-417d-9e57-3df7afc4e808",
          "6edddab5-d635-44de-ba4b-acfed9893a59",
          "c2473e95-9f9b-4f4a-bc08-ac913f84e0f2",
          "67ccda91-00ea-47a3-8e47-5dbec89bd273"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 59138,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "973efbd0-23ac-490b-b8ba-080ed9b75688",
        "title": "Realizar manipulação de itens no carrinho",
        "fullFile": "/home/jenkins/workspace/Testes-Automatizados/Testes-API/gsp-api-test-daily/test/automacaoapi/captacaopedido.js",
        "file": "/test/automacaoapi/captacaopedido.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Deletando produto do carrinho",
            "fullTitle": "Realizar manipulação de itens no carrinho Deletando produto do carrinho",
            "timedOut": false,
            "duration": 5171,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .delete(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "5cdff721-3cf1-42c9-8b76-ee8f3e5a978a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Criando um novo carrinho - Cart-Mine",
            "fullTitle": "Realizar manipulação de itens no carrinho Criando um novo carrinho - Cart-Mine",
            "timedOut": false,
            "duration": 4635,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await cartSevice.cartInfo();\nJoi.assert(response.body, schema_cart().cart_sucess);\nexpect(response.status).to.eql(200);\ncart_uid = response.body.summary.cartUid;\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "0ef7c94a-8019-452b-89ad-9dfb8cb55cc9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com estoque no carrinho - cartIem ",
            "fullTitle": "Realizar manipulação de itens no carrinho Adicionando produto com estoque no carrinho - cartIem ",
            "timedOut": false,
            "duration": 9400,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"produto_regular\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCart);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "0f318d69-f399-426c-bbe8-569a0edc30b3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando um novo produto utilizando  - cartItem ",
            "fullTitle": "Realizar manipulação de itens no carrinho Adicionando um novo produto utilizando  - cartItem ",
            "timedOut": false,
            "duration": 9588,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"produto_regular_casaestilo\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCart);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "b38a0c58-f591-498c-b4eb-cb668e1efefc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Consultando todos os produtos que estão no carrinho - GetCart",
            "fullTitle": "Realizar manipulação de itens no carrinho Consultando todos os produtos que estão no carrinho - GetCart",
            "timedOut": false,
            "duration": 4643,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nconsole.log(response.body.purchasedItems[0])\nexpect(response.body.purchasedItems[0].productCode).to.equal(10155);\ncartItemUid = (response.body.purchasedItems[0].cartItemUid);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "da639dcd-9bde-4e41-87ea-ea0f75b85f2c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Deletando produto do carrinho",
            "fullTitle": "Realizar manipulação de itens no carrinho Deletando produto do carrinho",
            "timedOut": false,
            "duration": 4583,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .delete(`/v1/cart/${cart_uid}/item/${cartItemUid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "b484693d-8855-45f3-9bef-c93cbecb1145",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Consultando todos os produtos que estão no carrinho - GetCart",
            "fullTitle": "Realizar manipulação de itens no carrinho Consultando todos os produtos que estão no carrinho - GetCart",
            "timedOut": false,
            "duration": 5833,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nexpect(response.body.purchasedItems[0].productCode).to.not.equal(62915);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "0409670c-ba85-44eb-b70d-a9690cd7d075",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "5cdff721-3cf1-42c9-8b76-ee8f3e5a978a",
          "0ef7c94a-8019-452b-89ad-9dfb8cb55cc9",
          "0f318d69-f399-426c-bbe8-569a0edc30b3",
          "b38a0c58-f591-498c-b4eb-cb668e1efefc",
          "da639dcd-9bde-4e41-87ea-ea0f75b85f2c",
          "b484693d-8855-45f3-9bef-c93cbecb1145",
          "0409670c-ba85-44eb-b70d-a9690cd7d075"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 43853,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f7231bb8-2ec6-46d1-b8a7-3bd332014aba",
        "title": "Validar que está apresentando a marca na product search",
        "fullFile": "/home/jenkins/workspace/Testes-Automatizados/Testes-API/gsp-api-test-daily/test/automacaoapi/captacaopedido.js",
        "file": "/test/automacaoapi/captacaopedido.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Deletando produto do carrinho",
            "fullTitle": "Validar que está apresentando a marca na product search Deletando produto do carrinho",
            "timedOut": false,
            "duration": 4683,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .delete(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "cb726c2b-c4c2-482f-9639-bfe62c78a0d7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Criando um novo carrinho - Cart-Mine",
            "fullTitle": "Validar que está apresentando a marca na product search Criando um novo carrinho - Cart-Mine",
            "timedOut": false,
            "duration": 4558,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await cartSevice.cartInfo();\nJoi.assert(response.body, schema_cart().cart_sucess);\nexpect(response.status).to.eql(200);\ncart_uid = response.body.summary.cartUid;\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "34885257-8ae0-4516-b8be-3b59d051c2c5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto e verificando apresentação da marca ma product search",
            "fullTitle": "Validar que está apresentando a marca na product search Adicionando produto e verificando apresentação da marca ma product search",
            "timedOut": false,
            "duration": 8182,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"produto_regular\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nexpect(valor.companyBrandId,\"companiBrandId\").to.be.oneOf([1,2,3]);",
            "err": {},
            "isRoot": false,
            "uuid": "7e225825-e8da-4bbd-b4f0-3056feefd8c1",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "cb726c2b-c4c2-482f-9639-bfe62c78a0d7",
          "34885257-8ae0-4516-b8be-3b59d051c2c5",
          "7e225825-e8da-4bbd-b4f0-3056feefd8c1"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 17423,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0388aeac-d53c-486e-b515-a7d68e07503c",
        "title": "Captar pedido de vitrine e banner",
        "fullFile": "/home/jenkins/workspace/Testes-Automatizados/Testes-API/gsp-api-test-daily/test/automacaoapi/captacaopedido.js",
        "file": "/test/automacaoapi/captacaopedido.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Deletando produto do carrinho",
            "fullTitle": "Captar pedido de vitrine e banner Deletando produto do carrinho",
            "timedOut": false,
            "duration": 4722,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .delete(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "d2db18fc-881c-48cd-907d-c2effa956a45",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Criando um novo carrinho - Cart-Mine",
            "fullTitle": "Captar pedido de vitrine e banner Criando um novo carrinho - Cart-Mine",
            "timedOut": false,
            "duration": 4481,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await cartSevice.cartInfo();\nJoi.assert(response.body, schema_cart().cart_sucess);\nexpect(response.status).to.eql(200);\ncart_uid = response.body.summary.cartUid;\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "d631f73f-7831-46cb-a7cc-038d556de551",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com estoque no carrinho - cartIem ",
            "fullTitle": "Captar pedido de vitrine e banner Adicionando produto com estoque no carrinho - cartIem ",
            "timedOut": false,
            "duration": 9435,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"produto_vitrine\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCart);\nconsole.log(jsonUpdate);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(response.body);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "6c22c3d5-990a-4228-af6e-7f354f823da1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Consultando todos os produtos que estão no carrinho - GetCart",
            "fullTitle": "Captar pedido de vitrine e banner Consultando todos os produtos que estão no carrinho - GetCart",
            "timedOut": false,
            "duration": 4632,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "c8ce589b-fb4f-44e4-b9ce-66d58aef4cc0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Selecionando endereço e fazendo o envio do pedido - Shipping ",
            "fullTitle": "Captar pedido de vitrine e banner Selecionando endereço e fazendo o envio do pedido - Shipping ",
            "timedOut": false,
            "duration": 11357,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst address = await profileService.addressInfo();\nconst updateAdress = address.body;\nconst valor = address.body.addresses[0].deliveryModes[0].deliveryPolicyId;\nconst alteracaoDeli = { deliveryPolicyId: valor };\nconst jsonUpdate = _.merge(\n  {},\n  {},\n  payloadShipping,\n  updateAdress,\n  alteracaoDeli\n);\nconst response = await request(url)\n  .patch(`/v1/cart/${cart_uid}/shipping`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nJoi.assert(response.body, schema_cart().shippingOk);\nexpect(response.status).to.eql(200);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "4a57e228-af28-4d08-8912-feb8f398b633",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Realizando o pagamento do pedido - payment",
            "fullTitle": "Captar pedido de vitrine e banner Realizando o pagamento do pedido - payment",
            "timedOut": false,
            "duration": 5952,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst payment_conditions = token.body.orderProfile.paymentConditions[0];\nconst jsonUpdate = _.merge({}, payment_conditions, paymentCart);;\nconst response = await request(url)\n  .patch(`/v1/cart/${cart_uid}/payment`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nJoi.assert(response.body, schema_cart().payment_sucess);\nexpect(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "2cd727e8-cda7-4e63-baa1-2fc5d0e5ea3b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Finalizando o pedido e gerando o número do pedido - cartChekcout",
            "fullTitle": "Captar pedido de vitrine e banner Finalizando o pedido e gerando o número do pedido - cartChekcout",
            "timedOut": false,
            "duration": 18202,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst address = await profileService.addressInfo();\nconst orderNumber = await orderService.generate_order_number();\nconst payment = token.body.orderProfile.paymentConditions[0];\nconst payment_update = { paymentConditions: payment };\nconst address_update = address.body;\nconst address_update_new = { addresses: address_update };\nconst orderNumber_update = { orderNumber: orderNumber.body.orderNumber };\nconst jsonupdate = _.merge(\n  {},\n  paymentCartCheckout,\n  payment_update,\n  address_update_new,\n  orderNumber_update\n);\nconst response = await request(url)\n\n  .post(`/v1/cart/${cart_uid}/checkout`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonupdate);\nJoi.assert(response.body, schema_cart().payment_checkout);\nexpect(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "a4e09a88-ad65-4a8c-af03-e55049b9ac88",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "d2db18fc-881c-48cd-907d-c2effa956a45",
          "d631f73f-7831-46cb-a7cc-038d556de551",
          "6c22c3d5-990a-4228-af6e-7f354f823da1",
          "c8ce589b-fb4f-44e4-b9ce-66d58aef4cc0",
          "4a57e228-af28-4d08-8912-feb8f398b633",
          "2cd727e8-cda7-4e63-baa1-2fc5d0e5ea3b",
          "a4e09a88-ad65-4a8c-af03-e55049b9ac88"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 58781,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "703457b4-d885-4c1a-aa7f-a700704b1e9f",
        "title": "Realizar captação cota CN",
        "fullFile": "/home/jenkins/workspace/Testes-Automatizados/Testes-API/gsp-api-test-daily/test/automacaoapi/captacaopedido.js",
        "file": "/test/automacaoapi/captacaopedido.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Deletando produto do carrinho",
            "fullTitle": "Realizar captação cota CN Deletando produto do carrinho",
            "timedOut": false,
            "duration": 5131,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .delete(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "ad665206-a02d-4996-a058-bbb4e32ed3c7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Criando um novo carrinho - Cart-Mine",
            "fullTitle": "Realizar captação cota CN Criando um novo carrinho - Cart-Mine",
            "timedOut": false,
            "duration": 4523,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await cartSevice.cartInfo();\nJoi.assert(response.body, schema_cart().cart_sucess);\nexpect(response.status).to.eql(200);\ncart_uid = response.body.summary.cartUid;\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "b6174549-02aa-41d3-bc22-8614217cf403",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com estoque no carrinho - cartIem ",
            "fullTitle": "Realizar captação cota CN Adicionando produto com estoque no carrinho - cartIem ",
            "timedOut": false,
            "duration": 10132,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"produto_cota_cn\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCartCota);\nconsole.log(jsonUpdate);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(response.body);\nconsole.log(response.body.products[0].message)\nexpect(response.body.products[0].message).to.equal(\"availability.commitment.notEnough.quotaCn\")\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "80cae48d-6015-4f08-b40a-8608daafdd06",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com estoque no carrinho - cartIem ",
            "fullTitle": "Realizar captação cota CN Adicionando produto com estoque no carrinho - cartIem ",
            "timedOut": false,
            "duration": 9620,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"produto_cota_cn\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCart);\nconsole.log(jsonUpdate);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(response.body);\nexpect(response.body.products[0].message).to.equal(\"cartItem.ok\")\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "11131249-39ad-4e1d-a845-d59e7f486542",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Consultando todos os produtos que estão no carrinho - GetCart",
            "fullTitle": "Realizar captação cota CN Consultando todos os produtos que estão no carrinho - GetCart",
            "timedOut": false,
            "duration": 4497,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "396f8ea8-fbc5-4c67-a597-819354982266",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "ad665206-a02d-4996-a058-bbb4e32ed3c7",
          "b6174549-02aa-41d3-bc22-8614217cf403",
          "80cae48d-6015-4f08-b40a-8608daafdd06",
          "11131249-39ad-4e1d-a845-d59e7f486542",
          "396f8ea8-fbc5-4c67-a597-819354982266"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 33903,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4a97391c-2892-439a-b129-b6e28efea406",
        "title": "Realizar captação com pedido mínimo",
        "fullFile": "/home/jenkins/workspace/Testes-Automatizados/Testes-API/gsp-api-test-daily/test/automacaoapi/captacaopedido.js",
        "file": "/test/automacaoapi/captacaopedido.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Deletando produto do carrinho",
            "fullTitle": "Realizar captação com pedido mínimo Deletando produto do carrinho",
            "timedOut": false,
            "duration": 4590,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .delete(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "e1292dfe-5b74-41d9-96bf-227e6d6fc9f0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Criando um novo carrinho - Cart-Mine",
            "fullTitle": "Realizar captação com pedido mínimo Criando um novo carrinho - Cart-Mine",
            "timedOut": false,
            "duration": 4677,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await cartSevice.cartInfo();\nJoi.assert(response.body, schema_cart().cart_sucess);\nexpect(response.status).to.eql(200);\ncart_uid = response.body.summary.cartUid;\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "e7b621ce-24e9-4406-b9dd-02cc524d53ea",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com estoque no carrinho - cartIem ",
            "fullTitle": "Realizar captação com pedido mínimo Adicionando produto com estoque no carrinho - cartIem ",
            "timedOut": false,
            "duration": 9180,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"produto_lucratividade_60%\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCart);\nconsole.log(jsonUpdate);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(response.body);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "2a3c3bd0-cc19-4a87-8bc3-38eaaeab7d3f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Consultando todos os produtos que estão no carrinho - GetCart",
            "fullTitle": "Realizar captação com pedido mínimo Consultando todos os produtos que estão no carrinho - GetCart",
            "timedOut": false,
            "duration": 4814,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\ncartItemUid = response.body.purchasedItems[0].cartItemUid;\nconst valor = response.body.summary\nconsole.log(\"VALOR\", valor)\nexpect(valor.minOrderSizeRemaining).to.above(0);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "eed66295-3792-44b8-bb96-5d0f653235bd",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com estoque no carrinho - cartIem ",
            "fullTitle": "Realizar captação com pedido mínimo Adicionando produto com estoque no carrinho - cartIem ",
            "timedOut": false,
            "duration": 9145,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\n    productType = \"produto_lucratividade_60%\";\n    console.log(productType);\n\n    const DataProduct = await productService.produtSearchSucess(productType);\n    console.log(cartItemUid)\n    const response = await request(url)\n .put(`/v1/cart/${cart_uid}/item/${cartItemUid}`)\n .set(\"Content-Type\", \"application/json\")\n .set(\"x-app-token\", token.body[\"x-app-token\"])\n .send(payloadPedidoMinimo);\n    console.log(response.body);\n\n    return response;",
            "err": {},
            "isRoot": false,
            "uuid": "4eaf4223-9ac7-4184-b8e9-0ac46efd360a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Consultando que o pedido minímo foi alcançado - GetCart",
            "fullTitle": "Realizar captação com pedido mínimo Consultando que o pedido minímo foi alcançado - GetCart",
            "timedOut": false,
            "duration": 4848,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nconst valor = response.body.summary    \nexpect(valor.minOrderSizeRemaining).to.equal(0);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "cd9721a0-be9e-481b-92ce-5a1a23b9a036",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Selecionando endereço e fazendo o envio do pedido - Shipping ",
            "fullTitle": "Realizar captação com pedido mínimo Selecionando endereço e fazendo o envio do pedido - Shipping ",
            "timedOut": false,
            "duration": 8926,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst address = await profileService.addressInfo();\nconst updateAdress = address.body;\nconst valor = address.body.addresses[0].deliveryModes[0].deliveryPolicyId;\nconst alteracaoDeli = { deliveryPolicyId: valor };\nconst jsonUpdate = _.merge(\n  {},\n  {},\n  payloadShipping,\n  updateAdress,\n  alteracaoDeli\n);\nconst response = await request(url)\n  .patch(`/v1/cart/${cart_uid}/shipping`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nJoi.assert(response.body, schema_cart().shippingOk);\nexpect(response.status).to.eql(200);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "c4b27f62-0578-438f-bfdb-f381615b355b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Realizando o pagamento do pedido - payment",
            "fullTitle": "Realizar captação com pedido mínimo Realizando o pagamento do pedido - payment",
            "timedOut": false,
            "duration": 4684,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst payment_conditions = token.body.orderProfile.paymentConditions[0];\nconst jsonUpdate = _.merge({}, payment_conditions, paymentCart);;\nconst response = await request(url)\n  .patch(`/v1/cart/${cart_uid}/payment`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nJoi.assert(response.body, schema_cart().payment_sucess);\nexpect(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "ea52c65a-c7f6-4921-9d6d-85742d6df00b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Finalizando o pedido e gerando o número do pedido - cartChekcout",
            "fullTitle": "Realizar captação com pedido mínimo Finalizando o pedido e gerando o número do pedido - cartChekcout",
            "timedOut": false,
            "duration": 17674,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst address = await profileService.addressInfo();\nconst orderNumber = await orderService.generate_order_number();\nconst payment = token.body.orderProfile.paymentConditions[0];\nconst payment_update = { paymentConditions: payment };\nconst address_update = address.body;\nconst address_update_new = { addresses: address_update };\nconst orderNumber_update = { orderNumber: orderNumber.body.orderNumber };\nconst jsonupdate = _.merge(\n  {},\n  paymentCartCheckout,\n  payment_update,\n  address_update_new,\n  orderNumber_update\n);\nconst response = await request(url)\n\n  .post(`/v1/cart/${cart_uid}/checkout`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonupdate);\nJoi.assert(response.body, schema_cart().payment_checkout);\nexpect(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "9eb6ddc5-2cbb-470e-bced-4191d47c4da1",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "e1292dfe-5b74-41d9-96bf-227e6d6fc9f0",
          "e7b621ce-24e9-4406-b9dd-02cc524d53ea",
          "2a3c3bd0-cc19-4a87-8bc3-38eaaeab7d3f",
          "eed66295-3792-44b8-bb96-5d0f653235bd",
          "4eaf4223-9ac7-4184-b8e9-0ac46efd360a",
          "cd9721a0-be9e-481b-92ce-5a1a23b9a036",
          "c4b27f62-0578-438f-bfdb-f381615b355b",
          "ea52c65a-c7f6-4921-9d6d-85742d6df00b",
          "9eb6ddc5-2cbb-470e-bced-4191d47c4da1"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 68538,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b6b710ec-8982-4966-b775-707e0c702021",
        "title": "Realizar aplicação de pedido com o kit  e quota",
        "fullFile": "/home/jenkins/workspace/Testes-Automatizados/Testes-API/gsp-api-test-daily/test/automacaoapi/captacaopedido.js",
        "file": "/test/automacaoapi/captacaopedido.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Deletando produto do carrinho",
            "fullTitle": "Realizar aplicação de pedido com o kit  e quota Deletando produto do carrinho",
            "timedOut": false,
            "duration": 4602,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .delete(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "07eee2e9-9762-478c-8cd9-c6e3e51f6deb",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Criando um novo carrinho - Cart-Mine",
            "fullTitle": "Realizar aplicação de pedido com o kit  e quota Criando um novo carrinho - Cart-Mine",
            "timedOut": false,
            "duration": 5270,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await cartSevice.cartInfo();\nJoi.assert(response.body, schema_cart().cart_sucess);\nexpect(response.status).to.eql(200);\ncart_uid = response.body.summary.cartUid;\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "06b027e5-3461-4a11-91c5-ae6b6daebe70",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com estoque no carrinho - cartIem ",
            "fullTitle": "Realizar aplicação de pedido com o kit  e quota Adicionando produto com estoque no carrinho - cartIem ",
            "timedOut": false,
            "duration": 9758,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"produto_kit_cota_cn\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCartCota);\nconsole.log(jsonUpdate);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(response.body);\nconsole.log(response.body.products[0].message)\nexpect(response.body.products[0].message).to.equal(\"availability.commitment.notEnough.quotaCn\")\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "c27deccd-0068-4c39-b2ab-2e33825b1459",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando novamente o produto com estoque no carrinho - cartIem ",
            "fullTitle": "Realizar aplicação de pedido com o kit  e quota Adicionando novamente o produto com estoque no carrinho - cartIem ",
            "timedOut": false,
            "duration": 9155,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"produto_kit_cota_cn\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCart);\nconsole.log(jsonUpdate);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(response.body);\nexpect(response.body.products[0].message).to.equal(\"cartItem.ok\")\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "02700624-f1ca-46ca-bf55-de025c644f2b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Consultando todos os produtos que estão no carrinho - GetCart",
            "fullTitle": "Realizar aplicação de pedido com o kit  e quota Consultando todos os produtos que estão no carrinho - GetCart",
            "timedOut": false,
            "duration": 4699,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "7b72cb97-6602-4c28-bc3c-c428e9956346",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "07eee2e9-9762-478c-8cd9-c6e3e51f6deb",
          "06b027e5-3461-4a11-91c5-ae6b6daebe70",
          "c27deccd-0068-4c39-b2ab-2e33825b1459",
          "02700624-f1ca-46ca-bf55-de025c644f2b",
          "7b72cb97-6602-4c28-bc3c-c428e9956346"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 33484,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c4b0efb5-b354-4062-aa5f-62320a5343af",
        "title": "Realizar pedido Kit Início",
        "fullFile": "/home/jenkins/workspace/Testes-Automatizados/Testes-API/gsp-api-test-daily/test/automacaoapi/captacaopedido.js",
        "file": "/test/automacaoapi/captacaopedido.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Validando a oferta de Kit Início",
            "fullTitle": "Realizar pedido Kit Início Validando a oferta de Kit Início",
            "timedOut": false,
            "duration": 6441,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let response = await profileService.commercialInfo(\"primeiroPedido\");    \nconsole.log(\" --- Response StartedKit ---\", response.body.orderProfile.starterKit);\nexpect(response.body.orderProfile.starterKit.mandatory).to.equal(true);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "5214e98a-044a-4e54-8e06-9f7d108a8b74",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Deletando produto do carrinho",
            "fullTitle": "Realizar pedido Kit Início Deletando produto do carrinho",
            "timedOut": false,
            "duration": 4454,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo(\"primeiroPedido\");\nconst response = await request(url)\n  .delete(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "f4d5e122-c5d8-4e93-8083-e51b9037883b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Criando um novo carrinho - Cart-Mine",
            "fullTitle": "Realizar pedido Kit Início Criando um novo carrinho - Cart-Mine",
            "timedOut": false,
            "duration": 4461,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await cartSevice.cartInfo(\"primeiroPedido\");\nJoi.assert(response.body, schema_cart().cart_sucess);\nexpect(response.status).to.eql(200);\ncart_uid = response.body.summary.cartUid;\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "d83cc7f0-413e-46c1-ab29-4ba0367e5ca6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com estoque no carrinho - cartIem ",
            "fullTitle": "Realizar pedido Kit Início Adicionando produto com estoque no carrinho - cartIem ",
            "timedOut": false,
            "duration": 8799,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo(\"primeiroPedido\");\nproductType = \"produto_regular\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCart);\nconsole.log(jsonUpdate);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(response.body);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "396d6f2f-85b6-42cd-90f7-b911b1ad27d5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Consultando todos os produtos que estão no carrinho - GetCart",
            "fullTitle": "Realizar pedido Kit Início Consultando todos os produtos que estão no carrinho - GetCart",
            "timedOut": false,
            "duration": 4673,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo(\"primeiroPedido\");\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "4cafe251-ea23-4ade-ac3a-0eeb657f5694",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "5214e98a-044a-4e54-8e06-9f7d108a8b74",
          "f4d5e122-c5d8-4e93-8083-e51b9037883b",
          "d83cc7f0-413e-46c1-ab29-4ba0367e5ca6",
          "396d6f2f-85b6-42cd-90f7-b911b1ad27d5",
          "4cafe251-ea23-4ade-ac3a-0eeb657f5694"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 28828,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9eb039a6-e13f-4da6-a038-a53696068bd8",
        "title": "Captação com uma pessoa início - buscando produto por nome",
        "fullFile": "/home/jenkins/workspace/Testes-Automatizados/Testes-API/gsp-api-test-daily/test/automacaoapi/captacaopedido.js",
        "file": "/test/automacaoapi/captacaopedido.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Validando a oferta de Kit Início",
            "fullTitle": "Captação com uma pessoa início - buscando produto por nome Validando a oferta de Kit Início",
            "timedOut": false,
            "duration": 3385,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let response = await profileService.commercialInfo(\"primeiroPedido\");    \nconsole.log(\" --- Response StartedKit ---\", response.body.orderProfile.starterKit);\nexpect(response.body.orderProfile.starterKit.mandatory).to.equal(true);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "442cbba9-f73a-4ae4-aa6c-788f04e33433",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Deletando produto do carrinho",
            "fullTitle": "Captação com uma pessoa início - buscando produto por nome Deletando produto do carrinho",
            "timedOut": false,
            "duration": 4510,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo(\"primeiroPedido\");\nconst response = await request(url)\n  .delete(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "09da3f7b-63f4-4ebb-b046-635095988ca9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Criando um novo carrinho - Cart-Mine",
            "fullTitle": "Captação com uma pessoa início - buscando produto por nome Criando um novo carrinho - Cart-Mine",
            "timedOut": false,
            "duration": 5474,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await cartSevice.cartInfo(\"primeiroPedido\");\nJoi.assert(response.body, schema_cart().cart_sucess);\nexpect(response.status).to.eql(200);\ncart_uid = response.body.summary.cartUid;\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "6a9dc173-31a0-473b-9ef9-2218580ba9ca",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com estoque no carrinho - cartIem ",
            "fullTitle": "Captação com uma pessoa início - buscando produto por nome Adicionando produto com estoque no carrinho - cartIem ",
            "timedOut": false,
            "duration": 9520,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo(\"primeiroPedido\");\nproductType = \"produto_nome\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCart);\nconsole.log(jsonUpdate);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(response.body);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "61c5a4b7-374b-49c9-9dd3-c3f3b4bd9c30",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Consultando todos os produtos que estão no carrinho - GetCart",
            "fullTitle": "Captação com uma pessoa início - buscando produto por nome Consultando todos os produtos que estão no carrinho - GetCart",
            "timedOut": false,
            "duration": 4931,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo(\"primeiroPedido\");\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "d4893804-e1b8-424d-88ec-42b2bdaf8e11",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "442cbba9-f73a-4ae4-aa6c-788f04e33433",
          "09da3f7b-63f4-4ebb-b046-635095988ca9",
          "6a9dc173-31a0-473b-9ef9-2218580ba9ca",
          "61c5a4b7-374b-49c9-9dd3-c3f3b4bd9c30",
          "d4893804-e1b8-424d-88ec-42b2bdaf8e11"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 27820,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "05522fcb-e247-4dee-9726-c5b8717b68cd",
        "title": "Realizar captação com promo de lucratividade (apenas um produto)",
        "fullFile": "/home/jenkins/workspace/Testes-Automatizados/Testes-API/gsp-api-test-daily/test/automacaoapi/captacaopedido.js",
        "file": "/test/automacaoapi/captacaopedido.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Deletando produto do carrinho",
            "fullTitle": "Realizar captação com promo de lucratividade (apenas um produto) Deletando produto do carrinho",
            "timedOut": false,
            "duration": 4504,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .delete(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "400e1d7c-dd2f-48f6-b5f8-58d4485019f8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Criando um novo carrinho - Cart-Mine",
            "fullTitle": "Realizar captação com promo de lucratividade (apenas um produto) Criando um novo carrinho - Cart-Mine",
            "timedOut": false,
            "duration": 4574,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await cartSevice.cartInfo();\nJoi.assert(response.body, schema_cart().cart_sucess);\nexpect(response.status).to.eql(200);\ncart_uid = response.body.summary.cartUid;\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "80a4b212-216c-4c25-b9f1-bae25342faca",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com estoque no carrinho - cartIem ",
            "fullTitle": "Realizar captação com promo de lucratividade (apenas um produto) Adicionando produto com estoque no carrinho - cartIem ",
            "timedOut": false,
            "duration": 9860,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"promocao_lucratividade\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCart);\nconsole.log(jsonUpdate);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(response.body);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "4e99496f-6472-42d6-a782-e9a4ad8e9ee2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Consultando todos os produtos que estão no carrinho - GetCart",
            "fullTitle": "Realizar captação com promo de lucratividade (apenas um produto) Consultando todos os produtos que estão no carrinho - GetCart",
            "timedOut": false,
            "duration": 4923,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "0db4860c-aa1d-4cf2-a76b-d617939706fe",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Validando promoção de Lucratividade - GetCart",
            "fullTitle": "Realizar captação com promo de lucratividade (apenas um produto) Validando promoção de Lucratividade - GetCart",
            "timedOut": false,
            "duration": 4423,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\n   \nlet productType = \"promocao_lucratividade\";\nlet promoType = \"promo_lucratividade\";\nlet pais = process.env.USER;\nlet productCodeInput = `${massa_produtos[pais][productType]}`;\nlet benefitType = `${massa_promocoes[promoType]}`;\nconsole.log(\"benefitType\", benefitType);\nconsole.log(\"productCode\", productCodeInput);\ngenericMethods.validatePromotionBenefitByProductCode(response, productCodeInput, benefitType)\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "892f78a9-dc18-4560-8dae-c1de865a01f5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Selecionando endereço e fazendo o envio do pedido - Shipping ",
            "fullTitle": "Realizar captação com promo de lucratividade (apenas um produto) Selecionando endereço e fazendo o envio do pedido - Shipping ",
            "timedOut": false,
            "duration": 8878,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst address = await profileService.addressInfo();\nconst updateAdress = address.body;\nconst valor = address.body.addresses[0].deliveryModes[0].deliveryPolicyId;\nconst alteracaoDeli = { deliveryPolicyId: valor };\nconst jsonUpdate = _.merge(\n  {},\n  {},\n  payloadShipping,\n  updateAdress,\n  alteracaoDeli\n);\nconst response = await request(url)\n  .patch(`/v1/cart/${cart_uid}/shipping`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nJoi.assert(response.body, schema_cart().shippingOk);\nexpect(response.status).to.eql(200);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "318bcd3a-a48e-47c3-8a8a-2d4406586765",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Realizando o pagamento do pedido - payment",
            "fullTitle": "Realizar captação com promo de lucratividade (apenas um produto) Realizando o pagamento do pedido - payment",
            "timedOut": false,
            "duration": 4591,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst payment_conditions = token.body.orderProfile.paymentConditions[0];\nconst jsonUpdate = _.merge({}, payment_conditions, paymentCart);;\nconst response = await request(url)\n  .patch(`/v1/cart/${cart_uid}/payment`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nJoi.assert(response.body, schema_cart().payment_sucess);\nexpect(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "fbbacceb-e44f-4824-af54-10371ad4a5e0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Finalizando o pedido e gerando o número do pedido - cartChekcout",
            "fullTitle": "Realizar captação com promo de lucratividade (apenas um produto) Finalizando o pedido e gerando o número do pedido - cartChekcout",
            "timedOut": false,
            "duration": 17755,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst address = await profileService.addressInfo();\nconst orderNumber = await orderService.generate_order_number();\nconst payment = token.body.orderProfile.paymentConditions[0];\nconst payment_update = { paymentConditions: payment };\nconst address_update = address.body;\nconst address_update_new = { addresses: address_update };\nconst orderNumber_update = { orderNumber: orderNumber.body.orderNumber };\nconst jsonupdate = _.merge(\n  {},\n  paymentCartCheckout,\n  payment_update,\n  address_update_new,\n  orderNumber_update\n);\nconst response = await request(url)\n\n  .post(`/v1/cart/${cart_uid}/checkout`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonupdate);\nJoi.assert(response.body, schema_cart().payment_checkout);\nexpect(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "a1fd13ac-29e0-43ac-9dae-a0c7ff3550b4",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "400e1d7c-dd2f-48f6-b5f8-58d4485019f8",
          "80a4b212-216c-4c25-b9f1-bae25342faca",
          "4e99496f-6472-42d6-a782-e9a4ad8e9ee2",
          "0db4860c-aa1d-4cf2-a76b-d617939706fe",
          "892f78a9-dc18-4560-8dae-c1de865a01f5",
          "318bcd3a-a48e-47c3-8a8a-2d4406586765",
          "fbbacceb-e44f-4824-af54-10371ad4a5e0",
          "a1fd13ac-29e0-43ac-9dae-a0c7ff3550b4"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 59508,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c04913f6-9903-4b30-bc7b-2c79d2e4265f",
        "title": "Realizar captação com promo de lucratividade (pedido inteiro)",
        "fullFile": "/home/jenkins/workspace/Testes-Automatizados/Testes-API/gsp-api-test-daily/test/automacaoapi/captacaopedido.js",
        "file": "/test/automacaoapi/captacaopedido.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Deletando produto do carrinho",
            "fullTitle": "Realizar captação com promo de lucratividade (pedido inteiro) Deletando produto do carrinho",
            "timedOut": false,
            "duration": 4684,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .delete(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "fbd91ba7-f1ff-4cab-a2cc-9884aca61cca",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Criando um novo carrinho - Cart-Mine",
            "fullTitle": "Realizar captação com promo de lucratividade (pedido inteiro) Criando um novo carrinho - Cart-Mine",
            "timedOut": false,
            "duration": 4757,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await cartSevice.cartInfo();\nJoi.assert(response.body, schema_cart().cart_sucess);\nexpect(response.status).to.eql(200);\ncart_uid = response.body.summary.cartUid;\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "2cf41457-9628-4553-9757-67af465273a3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com estoque no carrinho - cartIem ",
            "fullTitle": "Realizar captação com promo de lucratividade (pedido inteiro) Adicionando produto com estoque no carrinho - cartIem ",
            "timedOut": false,
            "duration": 10046,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"produto_regular\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCart);\nconsole.log(jsonUpdate);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(response.body);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "afec52a2-8f35-4197-8354-54315420a9aa",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com Promoção Lucratividade no carrinho - cartIem ",
            "fullTitle": "Realizar captação com promo de lucratividade (pedido inteiro) Adicionando produto com Promoção Lucratividade no carrinho - cartIem ",
            "timedOut": false,
            "duration": 9829,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"promocao_lucratividade\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCart);\nconsole.log(jsonUpdate);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(response.body);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "6965dc06-9948-416c-ac2c-5b4a76213d8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Consultando todos os produtos que estão no carrinho - GetCart",
            "fullTitle": "Realizar captação com promo de lucratividade (pedido inteiro) Consultando todos os produtos que estão no carrinho - GetCart",
            "timedOut": false,
            "duration": 4680,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "c700906a-b476-408d-8331-70f2e49919d5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Validando promoção de Lucratividade - GetCart",
            "fullTitle": "Realizar captação com promo de lucratividade (pedido inteiro) Validando promoção de Lucratividade - GetCart",
            "timedOut": false,
            "duration": 4832,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\n   \nlet productType = \"promocao_lucratividade\";\nlet promoType = \"promo_lucratividade\";\nlet pais = process.env.USER;\nlet productCodeInput = `${massa_produtos[pais][productType]}`;\nlet benefitType = `${massa_promocoes[promoType]}`;\nconsole.log(\"benefitType\", benefitType);\nconsole.log(\"productCode\", productCodeInput);\ngenericMethods.validatePromotionBenefitByProductCode(response, productCodeInput, benefitType)\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "15a96383-287a-4615-9d88-efd73f9fe89c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Selecionando endereço e fazendo o envio do pedido - Shipping ",
            "fullTitle": "Realizar captação com promo de lucratividade (pedido inteiro) Selecionando endereço e fazendo o envio do pedido - Shipping ",
            "timedOut": false,
            "duration": 9038,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst address = await profileService.addressInfo();\nconst updateAdress = address.body;\nconst valor = address.body.addresses[0].deliveryModes[0].deliveryPolicyId;\nconst alteracaoDeli = { deliveryPolicyId: valor };\nconst jsonUpdate = _.merge(\n  {},\n  {},\n  payloadShipping,\n  updateAdress,\n  alteracaoDeli\n);\nconst response = await request(url)\n  .patch(`/v1/cart/${cart_uid}/shipping`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nJoi.assert(response.body, schema_cart().shippingOk);\nexpect(response.status).to.eql(200);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "7a548ab5-880a-468b-beb5-35882af32eb3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Realizando o pagamento do pedido - payment",
            "fullTitle": "Realizar captação com promo de lucratividade (pedido inteiro) Realizando o pagamento do pedido - payment",
            "timedOut": false,
            "duration": 4579,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst payment_conditions = token.body.orderProfile.paymentConditions[0];\nconst jsonUpdate = _.merge({}, payment_conditions, paymentCart);;\nconst response = await request(url)\n  .patch(`/v1/cart/${cart_uid}/payment`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nJoi.assert(response.body, schema_cart().payment_sucess);\nexpect(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "f71af9c2-f262-4c93-9955-9a10f7712e26",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Finalizando o pedido e gerando o número do pedido - cartChekcout",
            "fullTitle": "Realizar captação com promo de lucratividade (pedido inteiro) Finalizando o pedido e gerando o número do pedido - cartChekcout",
            "timedOut": false,
            "duration": 17532,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst address = await profileService.addressInfo();\nconst orderNumber = await orderService.generate_order_number();\nconst payment = token.body.orderProfile.paymentConditions[0];\nconst payment_update = { paymentConditions: payment };\nconst address_update = address.body;\nconst address_update_new = { addresses: address_update };\nconst orderNumber_update = { orderNumber: orderNumber.body.orderNumber };\nconst jsonupdate = _.merge(\n  {},\n  paymentCartCheckout,\n  payment_update,\n  address_update_new,\n  orderNumber_update\n);\nconst response = await request(url)\n\n  .post(`/v1/cart/${cart_uid}/checkout`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonupdate);\nJoi.assert(response.body, schema_cart().payment_checkout);\nexpect(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "15d76bee-d903-43e9-b070-05fb4c28abbe",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "fbd91ba7-f1ff-4cab-a2cc-9884aca61cca",
          "2cf41457-9628-4553-9757-67af465273a3",
          "afec52a2-8f35-4197-8354-54315420a9aa",
          "6965dc06-9948-416c-ac2c-5b4a76213d8b",
          "c700906a-b476-408d-8331-70f2e49919d5",
          "15a96383-287a-4615-9d88-efd73f9fe89c",
          "7a548ab5-880a-468b-beb5-35882af32eb3",
          "f71af9c2-f262-4c93-9955-9a10f7712e26",
          "15d76bee-d903-43e9-b070-05fb4c28abbe"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 69977,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4e62a66d-67f9-4ef4-89ae-719711b533ed",
        "title": "Carrinho com faixa 1 de níveis de lucratividade e alcançando pedido mínimo",
        "fullFile": "/home/jenkins/workspace/Testes-Automatizados/Testes-API/gsp-api-test-daily/test/automacaoapi/captacaopedido.js",
        "file": "/test/automacaoapi/captacaopedido.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Deletando produto do carrinho",
            "fullTitle": "Carrinho com faixa 1 de níveis de lucratividade e alcançando pedido mínimo Deletando produto do carrinho",
            "timedOut": false,
            "duration": 5651,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .delete(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "db5511ee-9197-49e7-8406-45f8a97899dd",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Criando um novo carrinho - Cart-Mine",
            "fullTitle": "Carrinho com faixa 1 de níveis de lucratividade e alcançando pedido mínimo Criando um novo carrinho - Cart-Mine",
            "timedOut": false,
            "duration": 4809,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await cartSevice.cartInfo();\nJoi.assert(response.body, schema_cart().cart_sucess);\nexpect(response.status).to.eql(200);\ncart_uid = response.body.summary.cartUid;\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "e699d4c4-de27-4912-9179-14a4917a780b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com estoque no carrinho - cartIem ",
            "fullTitle": "Carrinho com faixa 1 de níveis de lucratividade e alcançando pedido mínimo Adicionando produto com estoque no carrinho - cartIem ",
            "timedOut": false,
            "duration": 9567,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"produto_faixa1_lucratividade\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCartQuantity1);\nconsole.log(jsonUpdate);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(response.body);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "7b625fc6-e695-4edd-95b1-6f2f4f209949",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Consultando todos os produtos que estão no carrinho - GetCart",
            "fullTitle": "Carrinho com faixa 1 de níveis de lucratividade e alcançando pedido mínimo Consultando todos os produtos que estão no carrinho - GetCart",
            "timedOut": false,
            "duration": 4549,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nconsole.log(response.body.purchasedItems[0].totalPrice,\"totalPrice\");\nconsole.log(response.body.purchasedItems[0].totalProfitability,\"totalProfitability\");\nconst totalPrice = response.body.purchasedItems[0].totalPrice;\nconst totalProfitability = response.body.purchasedItems[0].totalProfitability;\nconst quantity = response.body.purchasedItems[0].quantity;\nconst ganancia = totalPrice*quantity*40/100\nexpect(ganancia).to.equal(totalProfitability)\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "08c9034a-3ca5-4297-8e9a-22d7bb58b212",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "db5511ee-9197-49e7-8406-45f8a97899dd",
          "e699d4c4-de27-4912-9179-14a4917a780b",
          "7b625fc6-e695-4edd-95b1-6f2f4f209949",
          "08c9034a-3ca5-4297-8e9a-22d7bb58b212"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 24576,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "99207318-9984-4a5a-8560-ff488c82d177",
        "title": "Carrinho com faixa 1 de níveis de lucratividade e sem alcançar pedido mínimo",
        "fullFile": "/home/jenkins/workspace/Testes-Automatizados/Testes-API/gsp-api-test-daily/test/automacaoapi/captacaopedido.js",
        "file": "/test/automacaoapi/captacaopedido.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Deletando produto do carrinho",
            "fullTitle": "Carrinho com faixa 1 de níveis de lucratividade e sem alcançar pedido mínimo Deletando produto do carrinho",
            "timedOut": false,
            "duration": 4453,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .delete(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "da744a1f-3f55-48e7-945b-b451c26507a5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Criando um novo carrinho - Cart-Mine",
            "fullTitle": "Carrinho com faixa 1 de níveis de lucratividade e sem alcançar pedido mínimo Criando um novo carrinho - Cart-Mine",
            "timedOut": false,
            "duration": 4504,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await cartSevice.cartInfo();\nJoi.assert(response.body, schema_cart().cart_sucess);\nexpect(response.status).to.eql(200);\ncart_uid = response.body.summary.cartUid;\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "d8e71137-4c5f-42b6-836f-a97a967757b8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com estoque no carrinho - cartIem ",
            "fullTitle": "Carrinho com faixa 1 de níveis de lucratividade e sem alcançar pedido mínimo Adicionando produto com estoque no carrinho - cartIem ",
            "timedOut": false,
            "duration": 9203,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"produto_pedido_minimo\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCartQuantity1);\nconsole.log(jsonUpdate);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(response.body);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "e849762d-631f-43ae-9baa-9b1d3eb915c9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Consultando todos os produtos que estão no carrinho - GetCart",
            "fullTitle": "Carrinho com faixa 1 de níveis de lucratividade e sem alcançar pedido mínimo Consultando todos os produtos que estão no carrinho - GetCart",
            "timedOut": false,
            "duration": 4859,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nconsole.log(response.body.purchasedItems[0].totalPrice,\"totalPrice\");\nconsole.log(response.body.purchasedItems[0].totalProfitability,\"totalProfitability\");\nconst totalPrice = response.body.purchasedItems[0].totalPrice;\nconst totalProfitability = response.body.purchasedItems[0].totalProfitability;\nconst quantity = response.body.purchasedItems[0].quantity;\nconst ganancia = totalPrice*quantity*30/100\nexpect(ganancia).to.equal(totalProfitability)\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "9ff17837-e461-445c-9bce-f081b38d1c47",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "da744a1f-3f55-48e7-945b-b451c26507a5",
          "d8e71137-4c5f-42b6-836f-a97a967757b8",
          "e849762d-631f-43ae-9baa-9b1d3eb915c9",
          "9ff17837-e461-445c-9bce-f081b38d1c47"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 23019,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "fc94ea78-2d9e-4725-96e1-9a1af350ce43",
        "title": "Carrinho com faixa 2 de níveis de lucratividade e alcançando pedido mínimo",
        "fullFile": "/home/jenkins/workspace/Testes-Automatizados/Testes-API/gsp-api-test-daily/test/automacaoapi/captacaopedido.js",
        "file": "/test/automacaoapi/captacaopedido.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Deletando produto do carrinho",
            "fullTitle": "Carrinho com faixa 2 de níveis de lucratividade e alcançando pedido mínimo Deletando produto do carrinho",
            "timedOut": false,
            "duration": 4432,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .delete(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "4d3b87f0-0d99-4e57-b8d7-fe8d98cc09c3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Criando um novo carrinho - Cart-Mine",
            "fullTitle": "Carrinho com faixa 2 de níveis de lucratividade e alcançando pedido mínimo Criando um novo carrinho - Cart-Mine",
            "timedOut": false,
            "duration": 4591,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await cartSevice.cartInfo();\nJoi.assert(response.body, schema_cart().cart_sucess);\nexpect(response.status).to.eql(200);\ncart_uid = response.body.summary.cartUid;\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "7786b88f-6726-403d-9b14-7f1f30bc4419",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com estoque no carrinho - cartIem ",
            "fullTitle": "Carrinho com faixa 2 de níveis de lucratividade e alcançando pedido mínimo Adicionando produto com estoque no carrinho - cartIem ",
            "timedOut": false,
            "duration": 10386,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"produto_80_pontos\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCartQuantity1);\nconsole.log(jsonUpdate);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(response.body);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "08841edd-678d-41e3-98e9-aa598482758d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Consultando todos os produtos que estão no carrinho - GetCart",
            "fullTitle": "Carrinho com faixa 2 de níveis de lucratividade e alcançando pedido mínimo Consultando todos os produtos que estão no carrinho - GetCart",
            "timedOut": false,
            "duration": 4662,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nconsole.log(response.body.purchasedItems[0].totalPrice,\"totalPrice\");\nconsole.log(response.body.purchasedItems[0].totalProfitability,\"totalProfitability\");\nconst totalPrice = response.body.purchasedItems[0].totalPrice;\nconst totalProfitability = response.body.purchasedItems[0].totalProfitability;\nconst quantity = response.body.purchasedItems[0].quantity;\nconst ganancia = totalPrice*quantity*35/100\nexpect(ganancia).to.equal(totalProfitability)\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "1c2cbb34-5b63-4659-9d21-9e530a86e9ab",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "4d3b87f0-0d99-4e57-b8d7-fe8d98cc09c3",
          "7786b88f-6726-403d-9b14-7f1f30bc4419",
          "08841edd-678d-41e3-98e9-aa598482758d",
          "1c2cbb34-5b63-4659-9d21-9e530a86e9ab"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 24071,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e59e546b-4802-4ee4-8df2-04957c409432",
        "title": "Realizar captação com um item com exceção de lucratividade 0% e promo desconto 30%, um item exceção de lucratividade 60%, um item exceção de lucratividade 100%, um item com promo de lucratividade 20% e promo desconto 15%",
        "fullFile": "/home/jenkins/workspace/Testes-Automatizados/Testes-API/gsp-api-test-daily/test/automacaoapi/captacaopedido.js",
        "file": "/test/automacaoapi/captacaopedido.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Deletando produto do carrinho",
            "fullTitle": "Realizar captação com um item com exceção de lucratividade 0% e promo desconto 30%, um item exceção de lucratividade 60%, um item exceção de lucratividade 100%, um item com promo de lucratividade 20% e promo desconto 15% Deletando produto do carrinho",
            "timedOut": false,
            "duration": 4729,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .delete(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "d8c28a06-8cc7-455b-b972-0ddf29863c56",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Criando um novo carrinho - Cart-Mine",
            "fullTitle": "Realizar captação com um item com exceção de lucratividade 0% e promo desconto 30%, um item exceção de lucratividade 60%, um item exceção de lucratividade 100%, um item com promo de lucratividade 20% e promo desconto 15% Criando um novo carrinho - Cart-Mine",
            "timedOut": false,
            "duration": 4611,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await cartSevice.cartInfo();\nJoi.assert(response.body, schema_cart().cart_sucess);\nexpect(response.status).to.eql(200);\ncart_uid = response.body.summary.cartUid;\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "116951ae-6bf1-4dcc-9094-3cfb132c9ba0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com lucratividade 0% e promo desconto 30% no carrinho - cartIem ",
            "fullTitle": "Realizar captação com um item com exceção de lucratividade 0% e promo desconto 30%, um item exceção de lucratividade 60%, um item exceção de lucratividade 100%, um item com promo de lucratividade 20% e promo desconto 15% Adicionando produto com lucratividade 0% e promo desconto 30% no carrinho - cartIem ",
            "timedOut": false,
            "duration": 9213,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"produto_lucratividade_0%\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCart);\nconsole.log(jsonUpdate);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(response.body);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "54de5eb3-aa70-4f86-ad18-21aa1efd4f74",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Consultando todos os produtos que estão no carrinho - GetCart",
            "fullTitle": "Realizar captação com um item com exceção de lucratividade 0% e promo desconto 30%, um item exceção de lucratividade 60%, um item exceção de lucratividade 100%, um item com promo de lucratividade 20% e promo desconto 15% Consultando todos os produtos que estão no carrinho - GetCart",
            "timedOut": false,
            "duration": 4583,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "c486cd58-5025-4903-8a70-c6869847574a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Validando produto com exceção de lucratividade 0% no carrinho - GetCart",
            "fullTitle": "Realizar captação com um item com exceção de lucratividade 0% e promo desconto 30%, um item exceção de lucratividade 60%, um item exceção de lucratividade 100%, um item com promo de lucratividade 20% e promo desconto 15% Validando produto com exceção de lucratividade 0% no carrinho - GetCart",
            "timedOut": false,
            "duration": 4472,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nconst profitabilityException = response.body.purchasedItems[0].profitabilityException\nconsole.log(\"A exceção de lucratividade é de\", profitabilityException,\"%\")\nexpect(profitabilityException).to.equal(\"0\");\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "ab2691a9-99a3-49d3-83b3-604454a9efc5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Validando promoção desconto 30% - GetCart",
            "fullTitle": "Realizar captação com um item com exceção de lucratividade 0% e promo desconto 30%, um item exceção de lucratividade 60%, um item exceção de lucratividade 100%, um item com promo de lucratividade 20% e promo desconto 15% Validando promoção desconto 30% - GetCart",
            "timedOut": false,
            "duration": 4492,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\n   \nlet productType = \"produto_lucratividade_0%\";\nlet promoType = \"promo_desconto_percentual\";\nlet pais = process.env.USER;\nlet productCodeInput = `${massa_produtos[pais][productType]}`;\nlet benefitType = `${massa_promocoes[promoType]}`;\nconsole.log(\"benefitType\", benefitType);\nconsole.log(\"productCode\", productCodeInput);\ngenericMethods.validatePromotionBenefitByProductCode(response, productCodeInput, benefitType)\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "091092aa-9c56-457c-96c0-75ab0c1feb8f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com exceção de lucratividade 60% - cartIem ",
            "fullTitle": "Realizar captação com um item com exceção de lucratividade 0% e promo desconto 30%, um item exceção de lucratividade 60%, um item exceção de lucratividade 100%, um item com promo de lucratividade 20% e promo desconto 15% Adicionando produto com exceção de lucratividade 60% - cartIem ",
            "timedOut": false,
            "duration": 8916,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"produto_lucratividade_60%\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCart);\nconsole.log(jsonUpdate);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(response.body);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "b1e6c4f0-da13-42cb-8688-f3a60f11fb80",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Validando produto com exceção de lucratividade 60% no carrinho - GetCart",
            "fullTitle": "Realizar captação com um item com exceção de lucratividade 0% e promo desconto 30%, um item exceção de lucratividade 60%, um item exceção de lucratividade 100%, um item com promo de lucratividade 20% e promo desconto 15% Validando produto com exceção de lucratividade 60% no carrinho - GetCart",
            "timedOut": false,
            "duration": 4762,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nconst profitabilityException = response.body.purchasedItems[1].profitabilityException\nconsole.log(\"A exceção de lucratividade é de\", profitabilityException,\"%\")\nexpect(profitabilityException).to.equal(\"60\");\nreturn response;",
            "err": {
              "message": "AssertionError: expected null to equal '60'",
              "estack": "AssertionError: expected null to equal '60'\n    at Context.<anonymous> (test/automacaoapi/captacaopedido.js:2730:39)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
            },
            "isRoot": false,
            "uuid": "9f81a9f6-407e-4a71-928b-6eef00d867d6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com exceção de lucratividade 100% - cartIem ",
            "fullTitle": "Realizar captação com um item com exceção de lucratividade 0% e promo desconto 30%, um item exceção de lucratividade 60%, um item exceção de lucratividade 100%, um item com promo de lucratividade 20% e promo desconto 15% Adicionando produto com exceção de lucratividade 100% - cartIem ",
            "timedOut": false,
            "duration": 9019,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"produto_lucratividade_100%\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCart);\nconsole.log(jsonUpdate);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(response.body);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "018ed91b-9b69-42df-84f9-4d4629ad2d2e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Consultando todos os produtos que estão no carrinho - GetCart",
            "fullTitle": "Realizar captação com um item com exceção de lucratividade 0% e promo desconto 30%, um item exceção de lucratividade 60%, um item exceção de lucratividade 100%, um item com promo de lucratividade 20% e promo desconto 15% Consultando todos os produtos que estão no carrinho - GetCart",
            "timedOut": false,
            "duration": 4862,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "85458ae1-cf13-473e-a707-7800b6a31e87",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Validando produto com exceção de lucratividade 100% no carrinho - GetCart",
            "fullTitle": "Realizar captação com um item com exceção de lucratividade 0% e promo desconto 30%, um item exceção de lucratividade 60%, um item exceção de lucratividade 100%, um item com promo de lucratividade 20% e promo desconto 15% Validando produto com exceção de lucratividade 100% no carrinho - GetCart",
            "timedOut": false,
            "duration": 5659,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\n \nconst profitabilityException = response.body.purchasedItems[0].profitabilityException\nconsole.log(\"A exceção de lucratividade é de\", profitabilityException,\"%\")\nexpect(profitabilityException).to.equal(\"100\");\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "41d03cde-1772-4abb-a5fc-6f85c90a001d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com lucratividade 20% e promo desconto 15% no carrinho - cartIem ",
            "fullTitle": "Realizar captação com um item com exceção de lucratividade 0% e promo desconto 30%, um item exceção de lucratividade 60%, um item exceção de lucratividade 100%, um item com promo de lucratividade 20% e promo desconto 15% Adicionando produto com lucratividade 20% e promo desconto 15% no carrinho - cartIem ",
            "timedOut": false,
            "duration": 9273,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"produto_lucratividade_20%\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCart);\nconsole.log(jsonUpdate);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(response.body);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "395a1afd-6f07-4720-99f1-2aaac68f20f6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Validando produto com exceção de lucratividade 20% no carrinho - GetCart",
            "fullTitle": "Realizar captação com um item com exceção de lucratividade 0% e promo desconto 30%, um item exceção de lucratividade 60%, um item exceção de lucratividade 100%, um item com promo de lucratividade 20% e promo desconto 15% Validando produto com exceção de lucratividade 20% no carrinho - GetCart",
            "timedOut": false,
            "duration": 4801,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nconst profitabilityException = response.body.purchasedItems[2].profitabilityException\nconsole.log(\"A exceção de lucratividade é de\", profitabilityException,\"%\")\nexpect(profitabilityException).to.equal(\"20\");\nreturn response;",
            "err": {
              "message": "AssertionError: expected null to equal '20'",
              "estack": "AssertionError: expected null to equal '20'\n    at Context.<anonymous> (test/automacaoapi/captacaopedido.js:2818:37)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
            },
            "isRoot": false,
            "uuid": "435a142b-4912-42fb-a215-8188d634f0a9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Validando promoção desconto 15% - GetCart",
            "fullTitle": "Realizar captação com um item com exceção de lucratividade 0% e promo desconto 30%, um item exceção de lucratividade 60%, um item exceção de lucratividade 100%, um item com promo de lucratividade 20% e promo desconto 15% Validando promoção desconto 15% - GetCart",
            "timedOut": false,
            "duration": 4729,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\n \nlet productType = \"produto_lucratividade_20%\";\nlet promoType = \"promo_desconto_percentual\";\nlet pais = process.env.USER;\nlet productCodeInput = `${massa_produtos[pais][productType]}`;\nlet benefitType = `${massa_promocoes[promoType]}`;\nconsole.log(\"benefitType\", benefitType);\nconsole.log(\"productCode\", productCodeInput);\ngenericMethods.validatePromotionBenefitByProductCode(response, productCodeInput, benefitType)\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "68504aed-0b5a-4d01-9c6b-0500498f1ac0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Selecionando endereço e fazendo o envio do pedido - Shipping ",
            "fullTitle": "Realizar captação com um item com exceção de lucratividade 0% e promo desconto 30%, um item exceção de lucratividade 60%, um item exceção de lucratividade 100%, um item com promo de lucratividade 20% e promo desconto 15% Selecionando endereço e fazendo o envio do pedido - Shipping ",
            "timedOut": false,
            "duration": 9427,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst address = await profileService.addressInfo();\nconst updateAdress = address.body;\nconst valor = address.body.addresses[0].deliveryModes[0].deliveryPolicyId;\nconst alteracaoDeli = { deliveryPolicyId: valor };\nconst jsonUpdate = _.merge(\n  {},\n  {},\n  payloadShipping,\n  updateAdress,\n  alteracaoDeli\n);\nconst response = await request(url)\n  .patch(`/v1/cart/${cart_uid}/shipping`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nJoi.assert(response.body, schema_cart().shippingOk);\nexpect(response.status).to.eql(200);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "732bb961-b9d9-486c-8b01-791ff9c5b7c0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Realizando o pagamento do pedido - payment",
            "fullTitle": "Realizar captação com um item com exceção de lucratividade 0% e promo desconto 30%, um item exceção de lucratividade 60%, um item exceção de lucratividade 100%, um item com promo de lucratividade 20% e promo desconto 15% Realizando o pagamento do pedido - payment",
            "timedOut": false,
            "duration": 4524,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst payment_conditions = token.body.orderProfile.paymentConditions[0];\nconst jsonUpdate = _.merge({}, payment_conditions, paymentCart);;\nconst response = await request(url)\n  .patch(`/v1/cart/${cart_uid}/payment`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nJoi.assert(response.body, schema_cart().payment_sucess);\nexpect(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "03cb31be-b571-4cfe-8b21-6d83847571d1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Finalizando o pedido e gerando o número do pedido - cartChekcout",
            "fullTitle": "Realizar captação com um item com exceção de lucratividade 0% e promo desconto 30%, um item exceção de lucratividade 60%, um item exceção de lucratividade 100%, um item com promo de lucratividade 20% e promo desconto 15% Finalizando o pedido e gerando o número do pedido - cartChekcout",
            "timedOut": false,
            "duration": 20544,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst address = await profileService.addressInfo();\nconst orderNumber = await orderService.generate_order_number();\nconst payment = token.body.orderProfile.paymentConditions[0];\nconst payment_update = { paymentConditions: payment };\nconst address_update = address.body;\nconst address_update_new = { addresses: address_update };\nconst orderNumber_update = { orderNumber: orderNumber.body.orderNumber };\nconst jsonupdate = _.merge(\n  {},\n  paymentCartCheckout,\n  payment_update,\n  address_update_new,\n  orderNumber_update\n);\nconst response = await request(url)\n  .post(`/v1/cart/${cart_uid}/checkout`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonupdate);\nJoi.assert(response.body, schema_cart().payment_checkout);\nexpect(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "2b8196a3-6e10-4a59-880c-908bdcd84b70",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "d8c28a06-8cc7-455b-b972-0ddf29863c56",
          "116951ae-6bf1-4dcc-9094-3cfb132c9ba0",
          "54de5eb3-aa70-4f86-ad18-21aa1efd4f74",
          "c486cd58-5025-4903-8a70-c6869847574a",
          "ab2691a9-99a3-49d3-83b3-604454a9efc5",
          "091092aa-9c56-457c-96c0-75ab0c1feb8f",
          "b1e6c4f0-da13-42cb-8688-f3a60f11fb80",
          "018ed91b-9b69-42df-84f9-4d4629ad2d2e",
          "85458ae1-cf13-473e-a707-7800b6a31e87",
          "41d03cde-1772-4abb-a5fc-6f85c90a001d",
          "395a1afd-6f07-4720-99f1-2aaac68f20f6",
          "68504aed-0b5a-4d01-9c6b-0500498f1ac0",
          "732bb961-b9d9-486c-8b01-791ff9c5b7c0",
          "03cb31be-b571-4cfe-8b21-6d83847571d1",
          "2b8196a3-6e10-4a59-880c-908bdcd84b70"
        ],
        "failures": [
          "9f81a9f6-407e-4a71-928b-6eef00d867d6",
          "435a142b-4912-42fb-a215-8188d634f0a9"
        ],
        "pending": [],
        "skipped": [],
        "duration": 118616,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f8b35bc8-a816-4b82-8172-b9ef2aa3160a",
        "title": "Realizar captação com promo desconto, produto regular e produto com promo lucratividade",
        "fullFile": "/home/jenkins/workspace/Testes-Automatizados/Testes-API/gsp-api-test-daily/test/automacaoapi/captacaopedido.js",
        "file": "/test/automacaoapi/captacaopedido.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Deletando produto do carrinho",
            "fullTitle": "Realizar captação com promo desconto, produto regular e produto com promo lucratividade Deletando produto do carrinho",
            "timedOut": false,
            "duration": 4823,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .delete(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "90ef07b6-bf63-40dd-8f73-66f20a6ac181",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Criando um novo carrinho - Cart-Mine",
            "fullTitle": "Realizar captação com promo desconto, produto regular e produto com promo lucratividade Criando um novo carrinho - Cart-Mine",
            "timedOut": false,
            "duration": 5149,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await cartSevice.cartInfo();\nJoi.assert(response.body, schema_cart().cart_sucess);\nexpect(response.status).to.eql(200);\ncart_uid = response.body.summary.cartUid;\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "8f920234-a3ce-4ac3-a259-155c974e7026",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com promo de lucratividade no carrinho - cartIem ",
            "fullTitle": "Realizar captação com promo desconto, produto regular e produto com promo lucratividade Adicionando produto com promo de lucratividade no carrinho - cartIem ",
            "timedOut": false,
            "duration": 9402,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"promocao_lucratividade\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCartQuantity1);\nconsole.log(jsonUpdate);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(response.body);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "be962f4c-4172-4eba-b6b0-6550ea01f45f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Validando promoção de lucratividade - GetCart",
            "fullTitle": "Realizar captação com promo desconto, produto regular e produto com promo lucratividade Validando promoção de lucratividade - GetCart",
            "timedOut": false,
            "duration": 5713,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\n\nlet productType = \"promocao_lucratividade\";\nlet promoType = \"promo_lucratividade\"\nlet pais = process.env.USER;\nlet productCodeInput = `${massa_produtos[pais][productType]}`;\nlet benefitType = `${massa_promocoes[promoType]}`;\nconsole.log(\"benefitType\", benefitType);\nconsole.log(\"productCode\", productCodeInput);\ngenericMethods.validatePromotionBenefitByProductCode(response, productCodeInput, benefitType)\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "e3943610-c0b7-4ac7-8862-6f2a07ef3ef2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com promo de desconto no carrinho - cartIem ",
            "fullTitle": "Realizar captação com promo desconto, produto regular e produto com promo lucratividade Adicionando produto com promo de desconto no carrinho - cartIem ",
            "timedOut": false,
            "duration": 10085,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"produto_desconto\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCartQuantity1);\nconsole.log(jsonUpdate);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(response.body);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "c6835653-6c26-455a-9023-ac7e71facaed",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Validando promoção de Desconto - GetCart",
            "fullTitle": "Realizar captação com promo desconto, produto regular e produto com promo lucratividade Validando promoção de Desconto - GetCart",
            "timedOut": false,
            "duration": 5089,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\n\nlet productType = \"produto_desconto\";\nlet promoType = \"promo_desconto_percentual\"\nlet pais = process.env.USER;\nlet productCodeInput = `${massa_produtos[pais][productType]}`;\nlet benefitType = `${massa_promocoes[promoType]}`;\nconsole.log(\"benefitType\", benefitType);\nconsole.log(\"productCode\", productCodeInput);\ngenericMethods.validatePromotionBenefitByProductCode(response, productCodeInput, benefitType)\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "78948b31-f222-416a-9c87-08cbae7312b6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Adicionando produto com estoque no carrinho - cartIem ",
            "fullTitle": "Realizar captação com promo desconto, produto regular e produto com promo lucratividade Adicionando produto com estoque no carrinho - cartIem ",
            "timedOut": false,
            "duration": 9813,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nproductType = \"produto_regular\";\nconsole.log(productType);\nconst DataProduct = await productService.produtSearchSucess(productType);\nconst valor = DataProduct.body.products[0];\nconst alteracao = { products: [{ product: valor }] };\nconst jsonUpdate = _.merge({}, alteracao, payloadCart);\nconsole.log(jsonUpdate);\nconst response = await request(url)\n  .post(`/v2/cart/${cart_uid}/item`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nconsole.log(response.body);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "9ee593f5-99a1-4a3e-9d02-155200746164",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Consultando todos os produtos que estão no carrinho - GetCart",
            "fullTitle": "Realizar captação com promo desconto, produto regular e produto com promo lucratividade Consultando todos os produtos que estão no carrinho - GetCart",
            "timedOut": false,
            "duration": 4984,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let token = await profileService.commercialInfo();\nconst response = await request(url)\n  .get(`/v1/cart/${cart_uid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"]);\nexpect(response.status).to.equal(200);\nexpect(response.body.message).to.equal(\"get.cart.success\");\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "ef0f3d0f-b6a3-4b0a-92db-402bdd9d5feb",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Selecionando endereço e fazendo o envio do pedido - Shipping ",
            "fullTitle": "Realizar captação com promo desconto, produto regular e produto com promo lucratividade Selecionando endereço e fazendo o envio do pedido - Shipping ",
            "timedOut": false,
            "duration": 13357,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst address = await profileService.addressInfo();\nconst updateAdress = address.body;\nconst valor = address.body.addresses[0].deliveryModes[0].deliveryPolicyId;\nconst alteracaoDeli = { deliveryPolicyId: valor };\nconst jsonUpdate = _.merge(\n  {},\n  {},\n  payloadShipping,\n  updateAdress,\n  alteracaoDeli\n);\nconst response = await request(url)\n  .patch(`/v1/cart/${cart_uid}/shipping`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nJoi.assert(response.body, schema_cart().shippingOk);\nexpect(response.status).to.eql(200);\nreturn response;",
            "err": {},
            "isRoot": false,
            "uuid": "7c3eea55-d715-4135-9c58-a7e467ee7747",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Realizando o pagamento do pedido - payment",
            "fullTitle": "Realizar captação com promo desconto, produto regular e produto com promo lucratividade Realizando o pagamento do pedido - payment",
            "timedOut": false,
            "duration": 6263,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst payment_conditions = token.body.orderProfile.paymentConditions[0];\nconst jsonUpdate = _.merge({}, payment_conditions, paymentCart);;\nconst response = await request(url)\n  .patch(`/v1/cart/${cart_uid}/payment`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonUpdate);\nJoi.assert(response.body, schema_cart().payment_sucess);\nexpect(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "1dc3a6ab-9e5e-4bf3-9aa1-7fbf09d5e499",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Finalizando o pedido e gerando o número do pedido - cartChekcout",
            "fullTitle": "Realizar captação com promo desconto, produto regular e produto com promo lucratividade Finalizando o pedido e gerando o número do pedido - cartChekcout",
            "timedOut": false,
            "duration": 24504,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const token = await profileService.commercialInfo();\nconst address = await profileService.addressInfo();\nconst orderNumber = await orderService.generate_order_number();\nconst payment = token.body.orderProfile.paymentConditions[0];\nconst payment_update = { paymentConditions: payment };\nconst address_update = address.body;\nconst address_update_new = { addresses: address_update };\nconst orderNumber_update = { orderNumber: orderNumber.body.orderNumber };\nconst jsonupdate = _.merge(\n  {},\n  paymentCartCheckout,\n  payment_update,\n  address_update_new,\n  orderNumber_update\n);\nconst response = await request(url)\n\n  .post(`/v1/cart/${cart_uid}/checkout`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"x-app-token\", token.body[\"x-app-token\"])\n  .send(jsonupdate);\nJoi.assert(response.body, schema_cart().payment_checkout);\nexpect(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "46887cfc-e038-41bf-87dd-d89512dca4ed",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "90ef07b6-bf63-40dd-8f73-66f20a6ac181",
          "8f920234-a3ce-4ac3-a259-155c974e7026",
          "be962f4c-4172-4eba-b6b0-6550ea01f45f",
          "e3943610-c0b7-4ac7-8862-6f2a07ef3ef2",
          "c6835653-6c26-455a-9023-ac7e71facaed",
          "78948b31-f222-416a-9c87-08cbae7312b6",
          "9ee593f5-99a1-4a3e-9d02-155200746164",
          "ef0f3d0f-b6a3-4b0a-92db-402bdd9d5feb",
          "7c3eea55-d715-4135-9c58-a7e467ee7747",
          "1dc3a6ab-9e5e-4bf3-9aa1-7fbf09d5e499",
          "46887cfc-e038-41bf-87dd-d89512dca4ed"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 99182,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2024
}